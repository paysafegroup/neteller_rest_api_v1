FORMAT: 1A
HOST: https://api.neteller.com/v1

# Integrating the NETELLER REST API

> **!!ATTENTION!!- Mandatory NETELLER API Change Reminder** <br/><br/>
> Paysafe will no longer accept transactions requested through this API as of 15 May 2020.  In order to continue transaction processing
> via the NETELLER service you must integrate these new functions via the Paysafe Payments API prior to this date.
> <br/><br/>
> **On 16 November 2020, Paysafe will deactivate the Customer Lookup, Orders, Subscriptions and Plans functions currently available via the NETELLER REST API.**
> <br/><br/>
> Please note, the Customer Verification tool, https://api.neteller.com/v1/customers/verify/{ID}, will remain unaffected.  This tool will continue to allow you 
> to confirm whether the customer profile in your system matches the account details held within the NETELLER system.
> <br/><br/>
> Please see the <a href="https://developer.paysafe.com/en/additional-documentation/neteller-migration-guide/overview/">NETELLER Migration Guide</a> for more information.


The NETELLER REST API is comprehensive api that allows you to securely manage and facilitate your online payment needs.
The _RESTful API_ ([REpresentational State Transfer](http://en.wikipedia.org/wiki/Representational_state_transfer)) 
provides predictable, resource based URI's that removes the complexity that often comes with implementing
traditional SOAP or XML driven APIs.
<br/><br/>
This API leverages _OAUTH2_ as a token based authorization framework and works with JSON request and 
response object notation.

> The cURL samples included in this documentation are for reference purposes only. Substitute your own 
> values as appropriate. You can also refer to the [online cURL documentation](http://curl.haxx.se/docs/manpage.html) 
> for additional information on how to use cURL. <br/>
> <br/>
> The following flags are optional and may be useful during testing:<br/>
> <br/>
> `-k : (SSL) This option explicitly allows curl to perform "insecure" SSL connections and transfers.` 
>      `All SSL connections are attempted to be made secure by using the CA certificate bundle `
>      `installed by default. This makes all connections considered "insecure" fail unless -k, `
>      `--insecure is used. THIS SHOULD NEVER BE USED IN A PRODUCTION IMPLEMENTATION!`
>      `Note that if you only want HTTP headers in the output, -i, --include might be the option you're looking for.`
> <br/>
> <br/>
> `-v : Makes the fetching more verbose/talkative. Mostly useful for debugging. A line starting with '>' means` 
>      `"header data" sent by curl, '<' means "header data" received by curl that is hidden in normal cases, and a`
>      `line starting with '*' means additional info provided by curl.`

# Release Notes

> Please see the section on Versioning to find out how to verify which Minor Version of the API you are using.  You 
> can choose to upgrade to a newer version at anytime through API Settings of your merchant dashboard.

|API Version|Minor Version    |Patch / Description|
|---        |---              |---|
|<b>v1</b>  |<b>2015-04-28</b>|**_2018-06-18_**|
|           |                 |- Added new currencies: Chinese Yuan Renminbi \(CNY\)|
|           |                 |- Added Simplified Chinese (zh_CN)|
|           |                 |**_2018-01-27_**|
|           |                 |- Added new currencies: Colombian Peso \(COP\)|
|           |                 |**_2016-01-24_**|
|           |                 |- Added new scope for account\_basic\_profile and updated the accountProfile object to restrict values returned|
|           |                 |- Added new customer verify endpoint|
|           |                 |- Added new payment list endpoint|
|           |                 |- Updated paymentMethod to make NETELLER optional|
|           |                 |**_2015-11-24_**|
|           |                 |- Added transactionType to the the transaction object|
|           |                 |**_2015-10-20_**|
|           |                 |- Added payment method for NETELLERgo! \(paysafecard\)|
|           |                 |- Removed deprecated payment method for NETELLERgo! \(ukash\)|
|           |                 |- Added new currency: Emirati Dirham \(AED\)|
|           |                 |**_2015-09-15_**|
|           |                 |- Added payment methods for NETELLERgo! \(qiwi, yandex, webmoney\)|
|           |                 |- Added F/X support for orders presented in different currencies|
|           |                 |- Added support for one-step payments in NETELLERgo!|
|           |                 |**_2015-08-11_**|
|           |                 |- Added payment method for NETELLERgo! \(boku\)|
|           |                 |**_2015-07-07_**|                  
|           |                 |- Added ability to lookup all subscriptions for a customer|
|           |                 |- Added new currencies: South African Rand \(ZAR\), Brazilian Real \(BRL\)|
|           |                 |**_2015-06-02_**|                 
|           |                 |- Added payment method for NETELLERgo! \(bitcoin\)|
|           |                 |- Added pending status to NETELLERgo! and support for on_pending redirect|
|           |                 |**_2015-04-28_**|                                   
|           |                 |- Added status to order resource|
|           |                 |- Added billingDetail resource|
|           |                 |- Updated create order to take an optional array of billingDetail instead of payerProfile|
|           |                 |- Updated lookup payment to return optional billingDetail if payment is made as a guest and not a NETELLER member|
|           |                 |- Added invoiceId to invoice resource|
|           |                 |- Replace customer reference in subscription/order invoice lookup with billingDetail|
|           |                 |- Add HATEOAS link for corresponding customer detail for invoice lookup if they authenticated to NETELLER to pay|
|           |                 |- Create subscription requires a customer id now instead of profile \(The customer id is obtained using the authorization flow\)|
|           |                 |- Added error codes: 20009, 20301|
|<b>v1</b>  |<b>2015-11-04</b>|- **_2015-03-24_**|
|           |                 |- Added additional webhooks for orders, payments|
|           |                 |- Added payment methods for NETELLERgo! \(bradesco, bancodobrasil, itau, webpay\)|
|           |                 |- Enhanced OAUTH authorization flow to return customer id for an authorization|
|           |                 |- Added new currencies: Nigerian Naira \(NGN\), Taiwan New Dollar \(TWD\)|
|           |                 |- **_2015-02-10_**|
|           |                 |- Added payment methods for NETELLERgo! \(ideal\)|
|           |                 |- Added multifactor authentication support to OAUTH / NETELLERgo! flows|
|           |                 |- Added payment HATEOAS link to invoice resources|
|           |                 |- Set subscription start times to 00:00:00 and end times to 23:59:59|
|           |                 |- Ensure URLs returned from sandbox properly refer to sandbox host server|
|           |                 |- Removed support for deprecated currencies: Latvian Lats \(LVL\), Lithuanian Litus \(LTL\)|
|           |                 |- **_2014-12-09_**|
|           |                 |- Added support for NETELLERgo!|
|           |                 |- Added payment methods for NETELLERgo! \(sofort, poli, giropay, ukash\)|
|           |                 |- Added order, paymentMethod, redirect resources|
|           |                 |- Modified invoice resource to support order invoices|
|           |                 |- Added order lookup|
|           |                 |- Added lookup invoice for an order|
|           |                 |- Added error codes: 20016|
|           |                 |- **_2014-11-04_**|
|           |                 |- Renamed account resource to customer|
|           |                 |- Updated customer lookup to new resource uris \(/v1/account -> /v1/customer\)|
|           |                 |- Removed linkbackurl from accountProfile resource and moved to root of create customer request|
|           |                 |- Return customer resource instead of accountProfile on payment, subscriptions, invoices resources|
|           |                 |- Renamed subscriptionPlan resource to plan|
|           |                 |- Renamed invoice amountDue to totalAmount|
|           |                 |- Lists no longer contain un-necessary object wrapper, rather returns a list of the appropriate object.|
|<b>v1</b>  |<b>2014-04-15</b>|- **_2014-09-30_**|
|           |                 |- Added API minor version support|
|           |                 |- **_2014-09-03_**|
|           |                 |- Added OAUTH2 authorization grant|
|           |                 |- Added account, balance resources|
|           |                 |- Added account lookup functionality|
|           |                 |- Added new scopes: subscription\_payment, account\_enhanced\_profile, account\_contacts, account\_balance|
|           |                 |- Modified create subscription to require scope: subscription_payment|
|           |                 |- **_2014-07-22_**|
|           |                 |- Added Quick Signup functionality|
|           |                 |- **_2014-06-17_**|
|           |                 |- Added ability to list subscription invoices and subscription plans|
|           |                 |- Added subscription invoice lookup|
|           |                 |- Added subscription webhooks|
|           |                 |- Added error codes: 20050|
|           |                 |- Added new languages Greek \(el\_GR\), Korean \(ko\_KR\)|
|           |                 |- Added new subscription status: pending|
|           |                 |- **_2014-05-21_**|
|           |                 |- Added ability to list invoices for a subscription|
|           |                 |- Added support for resource expansion|
|           |                 |- Added new currencies: Malaysian Riggit \(MYR\), Moroccan Dirham \(MAD\), Tunisia Dinar \(TND\) and Swiss Franc \(CHF\)|
|           |                 |- Added error codes: 20102<|
|           |                 |- **_2014-04-15_**|
|           |                 |- Modified authentication to OAUTH2 authentication using client_credentials|
|           |                 |- Added subscription billing support|
|           |                 |- Added error codes: 20100, 20101|


## 2014-11-04 Upgrade Notes

The following page outlines items to review when upgrading your REST API from v1 \(2014-04-15\) to v1 \(2014-11-04\).

> You can trial your upgraded integration with your TEST sandbox account prior to upgrading in production.  Contact NETELLER Merchant Support if you require assistance with your sandbox account.
Upgrade Procedure

1. Modify any calls to /v1/accounts to the new /v1/customers resource
2. If you are looking up profile details using the the former call /v1/accounts/{accountId} this should now change to this format /v1/customers/?accountId={accountId}.
3. To query for a profile using email, the same convention is used but the resource uri should change as follows: /v1/customers/?email={email}.
4. When creating customers (formerly accounts), you now post an accountProfile to the new endpoint /v1/customers and receive a customer object in response.  If linkbackurl was previously supplied as part of the accountProfile,  this has been moved to the root of that request and is no longer part of the accountProfile.
5. Ensure any embedded references to accountProfile information are updated to refer to customer details

## 2015-04-28 Upgrade Notes

The following page outlines items to review when upgrading your REST API from v1 \(2014-11-04\) to v1 \(2015-04-28\).

If you are upgrading directly from v1 \(2014-04-15\), then you should first consider the changes outlined in the the 2014-11-04 Upgrade Notes.

> You can trial your upgraded integration with your TEST sandbox account prior to upgrading in production.  Contact NETELLER Merchant Support if you require assistance with your sandbox account.
Upgrade Procedure

1. Modify create order calls to supply an array of billingDetail instead of payerProfile. Only one billingDetail is permitted at this time.
2. Modify invoice lookups to use billingDetail instead of cusomer resource.
3. If you are using our subscription services, the create subscription now requires the customerId instead of the NETELLER account id OR email.   When you ask your customer for permission to create a subscription through the authorization flow, you will be returned the customerId that provided the authorization.  If you have already received authorization from your customer and do not want to have to have them re-authorize, you can use the customer lookup call to identify the customerId for their account.
4. Payment lookups will now only return a customer object if the payment is related to an account holder.  For NETELLERgo! checkouts that are performed by guests, a billingDetail block will be returned.


# Technical introduction

This section provides a technical introduction to the NETELLER REST API. 

## API Endpoints

The NETELLER REST API is available in the sandbox environment for integration testing purposes. To switch between the sandbox and the live production system you only need to change the endpoint URI and the credentials.

The following endpoints form the basis of a resource URI:
* **Sandbox (Testing) endpoint -** 
`https://test.api.neteller.com`
* **Production endpoint -** 
`https://api.neteller.com`

_As the sandbox environment is completely isolated, any changes you perform on your sandbox accounts configuration (such as secure IP registration, APP registration) may have to be repeated in your production account._


## Versioning

The first time you make an API request, NETELLER will automatically record the the current API version and associate it with your merchant account. 
<br/><br/>
The API version will influence the request/response object structure as well as the functionality that is available through the API.   A new version of the API will only be introduced if we roll out a backwards incompatible change that may impact your existing integrations.  As your API version can be maintained through the merchant portal, you can manage when to upgrade to the latest version, helping ensure your integration is not disrupted as new functionality becomes available.

> You can update your API version from the merchant dashboard.  This is a manual process.  NETELLER recommends you check back
> periodically to see if new versions are available as there may be key enhancements that have been released that
> would improve your integration.
> ![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/api_version_upgrade.png)
_Outdated minor versions of the API will be supported for 12 months, after which point they may be deprecated and you will be required to upgrade to a newer version._

### Major Version

The major version \(ie: /v1/ \) represents a major technology shift between versions of the API. Changes in the major version are reserved for large scale changes to the API that fundamentally change integration requirements from the previous version.  Modified business domain models, re-design of functional flows or change in API resource patterns are all considered major changes.  Changes to major version are rare and typically require an extended deprecation cycle \(~2 years\) from prior versions to allow all consumers of the API to adapt.

### Minor Version

The minor version is a date stamped version of the API indicating when a backwards incompatible change was released in production.  Only changes that are deemed backwards incompatible will trigger a new minor version.   Other changes that are considered backwards compatible are integrated in the last version and rolled out as patches as soon as they become available.  The minor version is NOT specified as part of the URL request, it is defined as part of your merchant account and can be controlled through your merchant account portal.
<br/><br/>
_When working with the REST API, you should treat any identity fields returned by NETELLER as strings so that in the event we change the structure of the ID, it will not break your integration._
<br/><br/>
**What is considered a backwards compatible change?**

* Adding API resources or adding new properties to existing API resources
* Modification to the order of parameters or JSON object elements
* Adding optional request parameters to API methods
* Adding webhook event types

**What is considered a backwards incompatible change?**

* Removal of a API resource
* Removal of an API Resources object attribute
* Changes to required parameter / JSON object elements
* Removal of previously supported API call


## Pagination

REST calls that return multiple resources will wrap the response as a JSON array named 'list'. By default, 10 items will be returned at a time and you can navigate to the next page of data using the returned HATEOAS links.
Any list results will also include a meta data section that will identify the number of records included in the collection,
the number of records per page (limit) and current page number.
<br/><br/>
For example, if a request to look up subscriptions identifies that there are 134 subscriptions and you have set your limit to 15, the first 15 items will be returned with navigation links to the next 15 items in the list \(items 16-30\). If you navigate to the next page using the provided HATEOAS link, you will now retrieve items 16-30 with a new navigation link provided to return to the previous page, as well as a link to continue to the next page of items._

> _You can change the default list page size by defining a **limit** parameter value._
|Parameter Name |Description|
|---            |---|
|limit          |The number of records to be returned per page. Default = 10, Max = 100|
|offset         |Identifies your location within the list and allows you to fetch the next set of resources|

Sample Response with List Data

```
{
    "meta": {
        "numberOfRecords": 77,
        "limit": 10,
        "page": 2
    },
    "list": [
        {
            "planId": "MONTHLYGREENPLAN",
            "planName": "Sample Premier Monthly Membership",
            "interval": 3,
            "intervalType": "monthly",
            "intervalCount": 4,
            "amount": 2995,
            "currency": "EUR",
            "status": "active"
        },
        {
            ...
        },
        {
            ...
        },
        
    ],
    "links": [
        {
            "url": "https://api.neteller.com/v1/plans?sessionid=234243242&limit=10&offset=10",
            "rel": "self",
            "method": "GET"
        },
        {
            "url": "https://api.neteller.com/v1/plans?sessionid=234243242&limit=10&offset=0",
            "rel": "prev_offset",
            "method": "GET"
        },
        {
            "url": "https://api.neteller.com/v1/plans?sessionid=234243242&limit=10&offset=20",
            "rel": "next_offset",
            "method": "GET"
        }
    ]
}
```


## Resource Expansion

Resource expansion can be compared to eager loading in the database realm. It offers a way to load a specific resource as well as other resources related to it.  You are encouraged to use resource expansion when you know you are going to need the extra information. This will reduce the amount of API calls as well as the amount of traffic to and from your server. You should avoid resource expansion when you want to reduce the amount of information returned or if you are unsure if you will need the additional resource object.
<br/><br/>
By adding an **expand** query parameter to the query you are effectively telling the server to include the details for the reference object in-line, in a expand single response.  Anytime you encounter an object whose only child attribute is a link, you can consider that object expandable. Passing that object name as part of your expand parameter list will automatically substitute the link with the relevant details.
<br/><br/>

For resources that have multiple expandable children, you can specify which resources to expand in a comma separated list. <br />
Eg. <b>?expand=resource1,resource2</b>

<br/>

> _Resource expansion does not apply to API requests that return a list._
<br/>
Below is a sample subscription lookup. By default the plan and customer resources are not expanded and instead includes a 
reference link that would provide the relevant details. If you would rather have the full subscription plan object returned, 
then add the **'expand=plan'** parameter to your request and you will see the second example result.
<br/>

*Result without resource expansion*

```
{
    "subscriptionId": "234234224",
    "plan": {
        "link": {
            "url": "https://api.neteller.com/v1/plan/MONTHLYGREENPLAN",
            "rel": "plan",
            "method": "GET"
        }
    },
    "customer": {
        "link": {
            "url": "https://api.neteller.com/v1/customers/CUST_0d676b4b-0eb8-4d78-af25-e41ab431e325",
            "rel": "customer",
            "method": "GET"
        }
    },
    "status": "active",
    "startDate": "2014-06-01T00:00:00Z",
    "endDate": "2014-12-31T00:00:00Z",
    "currentPeriodStart": "2014-07-01T00:00:00Z",
    "currentPeriodEnd": "2014-07-31T00:00:00Z",
    "cancelAtPeriodEnd": false,
    "cancelDate": null,
    "lastCompletedPaymentDate": "2014-06-31T00:00:00Z",
    "links": [
        {
            "url": "https: //api.neteller.com/v1/subscriptions/234234224",
            "rel": "self",
            "method": "GET"
        }
    ]
}
```

*Result with the plan resource expanded*

```
{
    "subscriptionId": "234234224",
    "plan": {
        "planId": "MONTHLYGREENPLAN",
        "planName": "Sample Premier Monthly Plan",
        "interval": 3,
        "intervalType": "monthly",
        "intervalCount": 4,
        "amount": 2495,
        "currency": "EUR",
        "status": "active"
    },
    "customer": {
        "link": {
            "url": "https://api.neteller.com/v1/customers/CUST_0d676b4b-0eb8-4d78-af25-e41ab431e325",
            "rel": "customer",
            "method": "GET"
        }
    },
    "status": "active",
    "startDate": "2014-06-01T00:00:00Z",
    "endDate": "2014-12-31T00:00:00Z",
    "currentPeriodStart": "2014-07-01T00:00:00Z",
    "currentPeriodEnd": "2014-07-31T00:00:00Z",
    "cancelAtPeriodEnd": false,
    "cancelDate": null,
    "lastCompletedPaymentDate": "2014-06-31T00:00:00Z",
    "links": [
        {
            "url": "https: //api.neteller.com/v1/subscriptions/234234224",
            "rel": "self",
            "method": "GET"
        }
    ]
}
```


## OAUTH Authentication

NETELLER REST APIs are based on the OAUTH2 standard as defined by [RFC6749](http://tools.ietf.org/html/rfc6749) and require that you supply a valid OAUTH2 access token with each API request.  

The REST APIs utilize a 'bearer' token. For more information on bearer tokens see: [draft-ietf-oauth-v2-bearer-23.txt](http://tools.ietf.org/id/draft-ietf-oauth-v2-bearer-23.txt)

### Obtain an access token

To access the NETELLER REST APIs, you will require an access token that can be obtained from the NETELLER OAUTH2 
token endpoint.  Obtain an access\_token by making a request to the NETELLER Token endpoint with the appropriate
grant_type identified.

> To obtain access tokens you must first register your client \(application\) you wish to integrate with.  APP 
> registration can be completed from your merchant account portal and will provide you with your APP specific 
> client_id and client_secret.  By default, the access token is a short lived one-time use token that expires 
> in 5 minutes.  If your integration requires frequent callbacks and you would like to be able to re-use the 
> access token, or require an extended token expiry time, please contact NETELLER Merchant Support to have your 
> APP settings adjusted accordingly.
The NETELLER Platform supports the following OAuth 2.0 flows

**client_credentials grant** 

Allows you to request an access token using only the client credentials provided to you.  This grant is used to access API functions that are under your control, and that do not require member authorization.
 
**authorization_code grant**

If your API request requires member permission (required scope permissions are identified in the section detailing each API operation), you will be required to use the authorization_code grant flow and will have an additional step of obtaining member authorization before you can obtain an access token.  This flow requires you to redirect your users to the authorization server where they will authenticate as a NETELLER member and approve the requested permissions.  The supplied auth_code can then be exchanged for an access_token allowing you access API functions on the members behalf.  
The client must be capable of interacting with the resource owner's user agent \(typically a web browser\) and capable of receiving incoming requests \(via redirection\) from the authorization server.

> These flows are intended for clients capable of maintaining their client credentials in a confidential manner, such as a client implemented on a secure server \(https\)
**OAUTH2 Workflow Diagram**

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/OAUTH2-Workflow-Diagram.jpg)


#### Obtain an access token using the client_credentials grant type

You can request an access token using only your client credentials \(client\_id:client\_secret\). 

> Your client credentials consist of a unique client_id and client_secret that can be found under the registered APPs section of your NETELLER Merchant Account. 
> The Authorization header should be constructed to pass a base64 encoded version of these values \(client_id:client_secret\).  If you are testing using cURL or a browser client, you can specify the HTTP Basic credentials by using the client_id as your username and client_secret as your password.
> <br/><br/>
> The client_secret for your application should not be shared with anyone or embedded in any code that you will distribute.  This exclusion also extends to an app binary that could be de-compiled.  This API call should only be made using server-side code over TLS.
**Request Parameters**

|Parameter Name     |Required?     |Description|
|---                |---           |---|
|grant\_type        |required      |set to `client_credentials`|

**Sample Request #1 \(using HTTP Basic Authorization\)**

> The authorization value is equal to Basic: Base64Encoded\(client\_id:client\_secret\)
```
curl -X POST \
-H "Authorization:Basic QUFBQlJiUkh3V2tzbG8tdTowLmtnOG1wSnhOeER5ZUx2SVNVZ04wbHFsWWVWQS1UeFZSWlVFWThIdWljOEEuUzRuRnpPWS0wLTF3bW1qd3lGV2l0aUZwRGxz" \
-H "Content-Type:application/json" \
-H "Cache-Control:no-cache" \
https://api.neteller.com/v1/oauth2/token?grant_type=client_credentials
```

**Sample Request #2 \(cURL specific sample, using client\_id and client\_secret as username/password\)**

```
curl -X POST \
-u "AAABRbRHwWkslo-u:0.kg8mpJxNxDyeLvISUgN0lqlYeVA-TxVRZUEY8Huic8A.S4nFzOY-0-1wmmjwyFWitiFpDls" \
-H "Content-Type:application/json" \
-H "Cache-Control:no-cache" \
https://api.neteller.com/v1/oauth2/token?grant_type=client_credentials
```

**Response Structure**

|Field Name     |Field Type     |Constraints    |Description|
|---            |---            |---            |---|
|accessToken    |string         |length <= 200  |The access token to be used in calls to the protect NETELLER REST APIs.|
|tokenType      |string         |length <= 50   |Identifies the type of token to the client.  Possible values: `Bearer`|
|expiresIn      |number         |               |The lifetime in seconds of the access token.|

> A refresh token WILL NOT be included for this grant type.  It is only applicable for type: authorization_grant
**Sample Response**

```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache
{
   "accessToken":"0.AQAAAUW-9Tu4AAAAAAAEk-BNppPGFNwoWODBcOzrnHwA.skB0dDtyMrW4xCZJw__FGNtL-08",
   "tokenType":"Bearer",
   "expiresIn":300
}
```

If the request failed client authentication or is invalid, the authorization server returns an [error response](#OAUTH Errors).

```
{
  "error": "unsupported_grant_type"
}
```

#### Obtain an access token using the auth_code grant type

> *Is member authorization required?*
> If the API resource does not require member authorization \(identified by a scope of *'default'*\), you can Obtain an access token using the client_credentials grant type instead.

The authorization grant flow has two parts and utilizes two authorization server endpoints.  

*1\) Authorization Endpoint* - used to obtain authorization \(auth_code\) from the resource owner via user-agent redirection.  
Your application redirects the member to NETELLER where they are asked to grant the requested permissions.  if the member approves, 
NETELLER will post back to your redirect uri with a unique authorization code that represents this members acknowledgement of your 
request.

*2\) Token Endpoint* - used to trade in the auth\_code, or previously issued refresh_token for an new access token  
The authorization code can then be exchanged for an access_token to use with your REST API calls.  This process can be repeated until 
authorization is revoked by the member or until different permissions are required.

**The flow consists of the following steps:**

1. The client app requests authorization by redirecting the user to the authorization endpoint. 
  
2. The resource owner (member) must verify their identity via a hosted authentication page.
   
3. The resource owner (member) is prompted to authorize the application.  The requested scopes are displayed and the member must Allow or Deny the authorization.
   
4. If the member authorized the requested scope, an auth_code is returned to your redirect uri.  This code will have a limited lifetime for you to complete the callback to redeem the access token.
   
5. Now you need to authorize your app.  Call the token endpoint with a grant type of authorization_code and provide the auth code from step 4. If successful, an access token is returned that can be used to make API requests on the users behalf.

> When invoking this flow, you must pass in the redirect\_uri that the user's browser will be redirected back to once app authorization is completed. The redirect_uri must be the same URI you specify when registering your web application OR must be the same one that was passed in the original authorization call.

**Obtain an authorization code**

```
GET https://api.neteller.com/v1/oauth2/authorize?client_id=YOUR_APPLICATION_ID&redirect_uri=YOUR_URI&scope=YOUR_REQUESTED_SCOPE&response_type=code
```

**Authorization Request Parameters**

|Parameter Name  |Required? |Description|
|---             |---       |---|
|client_id       |required  |Unique identifier generated when you registered your application.|
|redirect\_uri   |optional  |The uri that the user's browser will be redirected back to once app authorization is completed. If supplied during this authorization request, the same uri must be supplied in the call to the token endpoint. When not supplied, the default registered redirect uri will be used. The redirect_uri must secured over TLS \(https://\)|
|scope           |required  |The supplied scope parameter will indicate the level of access you require for your app. The scope parameter MUST be supplied. If your application requires multiple scopes then you should supply a comma separated list. Eg. scope=perm1,perm2|
|state           |optional  ||
|response_type   |          |Identifies the type of response for this request. Valid values: code - for server side flows **Only code is permitted at this time |
|lang            |          |OPTIONAL: preferred language to render the authorization flow in. see [Languages](#Languages) for complete list|

The following request sample shows how to ask for authorization to obtain a members balance to show on your cashier page.

```
GET https://api.neteller.com/v1/oauth2/authorize?client_id=AAABRbRHwWkslo-a&redirect_uri=https://www.mysite.com/cashier&scope=account_available_balance&response_type=code
```

The following flows will be presented:
 
Member Authentication - Member will need to verify their identify using their standard credentials.

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/auth_code-grant-type-1.png)

Member will be prompted to authorize the requested permissions.

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/auth_code-grant-type-2.png)

**Authorization Response Structure**

*Authorization Success*

If the member authorizes your request NETELLER will redirect \(via HTTP 302\) the user's browser by adding the following parameters to the query component of the redirection URI using the 
"application/x-www-form-urlencoded" format.

|Parameter Name    |Description|
|---               |---|
|code              |A short lived authorization code that can be exchanged for an access token. This value is short lived \(10 minutes\) and must be exchanged for a valid access token before it expires.|
|state             |Will be provided if the state parameter was present in the authorization request.|
|customer_id       |The associated unique identifier for this NETELLER account holder. This identifier can be used to lookup additional information about the customer.|

*Sample Response*

```
https://https//www.mysite.com/cashier?auth_code=0.AAAAAUmlhiRUAAAAAAAEk-DKmil1fF5vleYLDaiRhPDi.si-fsMDooIjhdGrShvafUALhQP8&state=abc&customer_id=CUS_F493C864-69D1-4939-B914-CC4C52A57DEF
```

**Exchange your authorization code for an access token**

Once you have received member authorization, you can exchange your authorization_code for an access token.  

```
POST https://api.neteller.com/v1/oauth2/token?grant_type=authorization_code&code=YOUR_AUTHORIZATION_CODE&redirect_uri=YOUR_REDIRECT_URI
```
 
*Token Request Parameters*

|Field Name    |Field Type    |Field Size    |Required?    |Description|
|---           |---           |---           |---          |---|
|grant\_type   |string        |100           |required     |set to 'authorization_code'|
|code          |string        |20            |required     |set to the auth_code previously received from the authorization server.|
|redirect\_uri |string        |500           |optional     |The TLS enabled redirection uri that will be returned to. This value must match the uri used to obtain authorization, If not supplied during the authorization flow then the redirect_uri will be the registered redirect uri for your application \(as set in the merchant.com portal under the APPS section\) and should not be passed.|

*Sample Request #1 \(using client_id and client_secret as username/password\)*

```
curl -X POST \
-u "AAABRbRHwWkslo-u:0.kg8mpJxNxDyeLvISUgN0lqlYeVA-TxVRZUEY8Huic8A.S4nFzOY-0-1wmmjwyFWitiFpDls" \
-H "Content-Type:application/json" \
-H "Cache-Control:no-cache" \
"https://api.neteller.com/v1/oauth2/token?grant_type=authorization_code&code=0.AAAAAUfvVDS3AAAAAAAEk-B5Ei4gPXAQA4B8EDH4jpdC._Cm7iYsUq1SQgJNiZg11yQwfpEg&redirect_uri=https://www.mysite.com"
```

*Sample Request \(using HTTP Basic Authorization\)*

The authorization value is equal to Basic: Base64Encoded\(client\_id:client_secret\)

```
curl -X POST \
-H "Authorization:Basic QUFBQlJiUkh3V2tzbG8tdTowLmtnOG1wSnhOeER5ZUx2SVNVZ04wbHFsWWVWQS1UeFZSWlVFWThIdWljOEEuUzRuRnpPWS0wLTF3bW1qd3lGV2l0aUZwRGxz" \
-H "Content-Type:application/json" \
-H "Cache-Control:no-cache" \
"https://api.neteller.com/v1/oauth2/token?grant_type=authorization_code&code=0.AAAAAUfvVDS3AAAAAAAEk-B5Ei4gPXAQA4B8EDH4jpdC._Cm7iYsUq1SQgJNiZg11yQwfpEg&redirect_uri=https://www.mysite.com"
```

If your app is successfully authenticated, and the authorization code is valid, the authorization server will return the following:

**Token Request Success**

*Response Structure*

A [token](# Complex JSON Objects) object will be returned.

|Field Name     |Field Type    |Field Size    |Description|
|---            |---           |---           |---|
|accessToken    |string        |100           |The access token to be used in calls to the protect NETELLER REST APIs.|
|tokenType      |string        |20            |Identifies the type of token to the client. For now only 'Bearer' is supported.|
|expiresIn      |number        |6             |The lifetime in seconds of the access token. Default is 300 seconds \(5 minutes\).|
|refreshToken   |string        |100           |The refresh token which can be used to obtain new access tokens using the same authorization grant that was previously   associated to it. This value is a secret. You should treat it like the user's password and take appropriate measures to protect it.|
|scope          |string        |250           |The scope associated with the access token.|

*Sample Response*

```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache
{
  "accessToken": "0.AQAAAUgUGIk5AAAAAAAEk-CgJxQeNBiq7ES8yQaLITPU.JGrVsVsiy3ASoQsYED9VkJv25eY",
  "tokenType": "Bearer",
  "expiresIn": 300,
  "refreshToken": "0.AgAAAUgUGIkyAAAAB1jwsODI5PCkVNOZul5AJ01mYtdh.ezGCYhN5YD22-BCOPX6U-muc72o",
  "scope": "subscription_payment"
}
```


#### Obtain an access token using your refresh token

If the previously issued access token has expired \(obtained from the authorization grant authentication flow\) 
and you receive a HTTP 401 - Unauthorized error, you can utilize the refresh token that was issued to you with 
the initial authorization response to obtain a new one.

*Request Parameter*

|Parameter Name     |Required?    |Description|
|---                |---          |---|
|grant\_type        |required     |set to 'refresh_token'|
|refresh\_token     |required     |The refresh token previously issued to the client|

*Sample Request*

```
curl -X POST \
-H "Authorization:Basic QUFBQlJiUkh3V2tzbG8tdTowLmtnOG1wSnhOeER5ZUx2SVNVZ04wbHFsWWVWQS1UeFZSWlVFWThIdWljOEEuUzRuRnpPWS0wLTF3bW1qd3lGV2l0aUZwRGxz" \
-H "Content-Type:application/json" \
-H "Cache-Control:no-cache" \
"https://api.neteller.com/v1/oauth2/token?grant_type=refresh_token&refresh_token=0.AgAAAUnPnWEeAAAAB1jwsOAq6iK0G2op1zi_sQC3KE22.oD4wHNZjuF5tWOZh2ozEpi2E7BE"
```

*Response Structure*

|Field Name    |Field Type  |Field Size     |Description|
|---           |---         |---            |---|
|accessToken   |string      |length <= 200  |The access token to be used in calls to the NETELLER REST APIs.|
|expiresIn     |number      |               |The lifetime in seconds of the access token.|
|tokenType     |string      |20             |Identifies the type of token to the client. "Bearer"|
|scope         |string      |               |The comma delimited list of scopes that have been authorized for this token.|

*Sample Response*

```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache
{
   "accessToken": "0.AQAAAUfvtyJyAAAAAAA27oALPWxe111yJMNH3HEa6l_o.EddShan6OS7sQX28UhYz5cz_LHE",
   "expiresIn": 300,
   "tokenType": "Bearer",
   "scope": "subscription_payment, account_available_balance"
}
```


## OAUTH Errors

####Authorization Request Errors

If the member does not authorize your request, or the request fails for reasons other then a missing or invalid redirection URI  NETELLER will redirect \(via HTTP 400 - Bad Request\) the user's browser by adding the following parameters to the query component of the redirection URL using the "application/x-www-form-urlencoded" format.

> There are some error situations in which you will not receive the error back on your redirect_uri.   For example, if you attempt to supply an insecure http:// redirect.  In this case the customer would see an invalid request error.  For this reason it is important to validate your integration!

|Parameter Name                 |Description|
|---                            |---|
|error                          |The error that occurred|
|error_description              |Reason for the error.|
|state                          |Will be provided if the **state** parameter was present in the authorization request|

Possible Errors:

|Error                           |Error Reason|
|---                             |---|
|**invalid_request**             |The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.|
|**unauthorized_client**         |The client is not authorized to request an authorization code using this method.|
|**access_denied**               |The resource owner or authorization server denied your request.|
|**unsupported_response_type**   |The authorization server does not support obtaining an authorization code using this method.|
|**invalid_scope**               |The requested scope is invalid, unknown, or malformed.|
|**server_error**                |The authorization server encountered an unexpected condition that prevented it from fulfilling the request.\(This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.\)|
|**temporarily_unavailable**     |The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.  \(This error code is needed because a 503.  Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.\)|

Sample Response

https://YOUR_URL/?error=access_denied&error_description=The+resource+owner+or+authorization+server+denied+your+request

#### Token Request Errors

The authorization server responds with an HTTP 400 \(Bad Request\) status code \(unless specified otherwise\) and includes the following parameters with a JSON response:

|Parameter Name                 |Description|
|---                            |---|
|error                          |The error that occurred|
|error_description              |Reason for the error.|
|state                          |Will be provided if the **state** parameter was present in the authorization request|


Possible Errors:

|Error                           |Error Reason|
|---                             |---|
|**invalid_request**             |The request is missing a required parameter, includes an unsupported parameter value \(other than grant type\), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.|
|**invalid_client**              |Client authentication failed \(e.g., unknown client, no client authentication included, or unsupported authentication method\). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the client attempted to authenticate via the "Authorization" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the "WWW-Authenticate" response header field matching the authentication scheme used by the client. **This error might also indicate that you are attempting access from an unauthorized IP address.|
|**invalid_grant**               |The provided authorization grant \(e.g., authorization code, resource owner credentials\) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.|
|**unauthorized_client**         |The authenticated client is not authorized to use this authorization grant type.|
|**server_error**                |The authorization server encountered an unexpected condition that prevented it from fulfilling the request.\(This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.\)|
|**unsupported_grant_type**      |The authorization grant type is not supported by the authorization server.|
|**invalid_scope**               |The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.|


## OAUTH Scopes

Some resources available through the NETELLER REST API require that your APP be granted appropriate authorization by the member.  This authorization of permissions, also referred to as authorized scope, is managed by directing the NETELLER member to a page where they can choose to approve or deny the requested access.
 
The following list identifies the authorized scopes that are available in the NETELLER API. These permissions, or scopes, are handled on a per member / per access token basis.  To retrieve a resources protected fields, you must first obtain an access token using the authorization grant flow or previously issued refresh token.  You can continue to obtain new access tokens for the already authorized scopes until the authorization expires or is revoked by the member. 
For API requests that permit default scope, you may not require member authorization if the fields you are concerned with are offered as part of the default response.   In this instance you should use your client credentials to obtain the required access token as there is no required member authorization.

> The permissions associated with an access token are set in the /v1/oauth2/authorize call.   

Some API methods will limit their response data dependent upon which authorized scopes have been granted.  See the JSON Objects reference for details around which fields are returned by default and which ones require member authorization. 

|Permission              |Authorized Scope             |Description|
|---                     |---                          |---|
|Subscription Payment    |subscription_payment         |Permits access to setup a subscription and automatically receive recurring payments from a NETELLER account holder<br/>**Member Prompt: Allow access to setup a subscription and receive recurring payments from your NETELLER account.**|
|Basic Profile           |account\_basic\_profile      |Permits access to your name, date of birth, country<br/>**Member Prompt: Allow access to view your name, date of birth and country.**|
|Enhanced Profile        |account\_enhanced\_profile   |Permits access to account address, city, post code, subdivision, account preferences and gender<br/>**Member Prompt: Allow access to view your address, account preferences and gender.**|
|Available Balance       |account\_available\_balance  |Permits access to view the members currently available balance<br/>**Member Prompt: Allow access to view your currently available balance.**|
|Contact Information     |account\_contacts            |Permits access to the member contact phone numbers.<br/>**Member Prompt: Allow access to view your contact phone numbers.**|


<a name='webhooks'></a>

## Webhooks

A webhook allows you to define an HTTP callback that will be POST to when an event occurs that you would like to be notified of.  You can define the notification URL and select which events you wish to be notified of from your merchant account portal.

> Webhooks will be sent whenever the state of the resource changes. Certain activity may lead to the same event being sent more than once.

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/merchant-dashboard-webhooks.png)

**Responding to a webhook**

To acknowledge that you received the webhook without any problem, your server should return a 200 HTTP status code. Any other information you return in the request headers or request body will be ignored. Any response code outside the 200 range, including 3xx codes, will indicate to NETELLER that you did not receive the webhook.

> If your system did not respond with a valid HTTP 200 status, NETELLER will continue to retry the request with an escalating time delay for up to 48 hours

**Secure webhooks \(recommended\)**

NETELLER recommends that you use one of the following forms of authentication on your webhook URLs
 
**HTTP Basic Authentication - Use basic authentication syntax in your webhook URL:**

Format : https://{username}:{password}@{webhook_url}
Example : https://exampleuser:NT1p2dsl@example.com/netellerwebhook

**Secret Key - Provide a secret key that is passed back as part of the webhook event notification body.**

Format : https://{webhook_url}
Example : https://example.com/netellerwebhook

> The secret key should not be shared with anyone.

**Sample webhook response**

```
{
     "mode": "live",
     "id": "ebecd052-757f-4991-9f19-469d21e6c065",
     "eventDate": "2014-01-01T00:00:00Z",
     "eventType": "subscription_payment_succeeded",
     "attemptNumber": 1,
     "key": "23haJ20opHJ2ks38aGEnw",
     "links": [
         {
             "url": "https://api.neteller.com/v1/subscriptions/234234224/invoices/99102",
             "rel": "invoice",
             "method": "GET"
         }
     ]
}
```

> When sending a Test Webhook request from the merchant portal, the links section will be excluded from the response as their is no valid resource reference to send.

**Subscription resource event**

|Event Types                            |Event that triggers the webhook|
|---                                    |---|
|subscription\_activated                |Subscription was activated. Also triggered when a subscription has moved from a 'pending' to 'active' state.|
|subscription\_cancelled                |Subscription was cancelled.|
|subscription\_cancelled\_at\_period\_end   |Subscription is set to be cancelled at the end of the current billing period.|
|subscription\_created                  |Subscription was successfully created.|
|subscription\_ended                    |Subscription has lapsed and is now ended.|
|subscription\_failed                   |Subscription failed to be created. Most likely the account had insufficient funds for initial payment.|
|subscription\_pending                  |Subscription is created but pending a future activation.|

**Order resource events**

|Event Types                             |Event that triggers the webhook|
|---                                     |---|
|order\_cancelled\_or\_expired           |Order payment failed, the member did not complete their order in time.|

**Invoice resource events**


|Event Types                             |Event that triggers the webhook|
|---                                     |---|
|order\_payment\_declined                |Order payment was declined.|
|order\_payment\_succeeded               |Order payment was successful.|
|subscription\_payment\_declined         |Subscription payment for period was not successful.<bt/>Attempts to collect payment for the subscription for the billing period have failed and no more retries will be attempted.|
|subscription\_payment\_pending\_retry   |Subscription payment was not collected as the member has insufficient funds available, <Br/>NETELLER will continue to try to collect payment for this period.|
|subscription\_payment\_succeeded        |Subscription payment for period was successful.|

**Payment resource events**

|Event Types           |Event that triggers the webhook|
|---                   |---|
|payment\_cancelled    |Payment was cancelled.|
|payment\_declined     |Payment was declined.|
|payment\_pending      |Payment is pending.|
|payment\_succeeded    |Payment is successful.|


## Merchant Currencies

<a name="currencies"></a>

|Currency Code|Description            |Decimal Places|
|---          |---                    |---|
|AED          |Emirati Dirham         |2|
|AUD          |Australian Dollar      |2|
|BRL          |Brazilian Real         |2|
|GBP          |British Pound          |2|
|BGN          |Bulgarian Lev          |2|
|CAD          |Canadian Dollar        |2|
|COP          |Colombian Peso         |2|
|CNY          |Chinese Yuan Renminbi  |2|
|DKK          |Danish Krone           |2|
|EUR          |Euro                   |2|
|HUF          |Hungarian Forint       |0|
|INR          |Indian Rupee           |2|
|JPY          |Japanese Yen           |0|
|MYR          |Malaysian Ringgit      |2|
|MAD          |Moroccan Dirham        |2|
|MXN          |Mexican Peso           |2|
|NGN          |Nigerian Naira         |2|
|NOK          |Norwegian Kroner       |2|
|PLN          |Polish Zloty           |2|
|RON          |Romanian New Leu       |2|
|RUB          |Russian Ruble          |2|
|SGD          |Singapore Dollar       |2|
|SEK          |Swedish Krona          |2|
|CHF          |Swiss Franc            |2|
|TWD          |Taiwan New Dollar      |2|
|TND          |Tunisia Dinar          |3|
|USD          |United States Dollar   |2|
|ZAR          |South African Rand     |2|

Note: When specifying amounts in your API calls be aware of the number of decimal places (minor units) that 
each currency supports.  You must change the formatting of the amount based on the minor units for the 
specific currency.  For example, Japanese Yen does not have minor units so the amount should be specified as 
such.  ie: 50 JPY would pass 50 in the amount, 50.00 USD would be an amount of 5000, and 50.000 TND would be 50000.


## Languages 

<a name="languages"></a>

|Language Code|Description|
|---          |---|
|da_DK        |Danish|
|de_DE        |German|
|el_GR        |Greek|
|en_US        |English|
|es_ES        |Spanish|
|fr_FR        |French|
|it_IT        |Italian|
|ja_JP        |Japanese|
|ko_KR        |Korean|
|no_NO        |Norwegian|
|pl_PL        |Polish|
|pt_PT        |Portuguese|
|ru_RU        |Russian|
|sv_SE        |Swedish|
|tr_TR        |Turkish|
|zh_CN        |Simplified Chinese|


# HTTP Responses

HTTP response codes are used to indicate the status of a request.To ease integration and support for developers 
integrating to our APIs, the error messages that are returned should be verbose enough to correct the problem.  
The error structure contains a 4–5 digit code as well as a human readable message. Additionally, the application 
error code will be returned in the header so it can be easily used by an application without parsing the body.

**HTTP Status Code Summary**

|HTTP Response Code Category|Description|
|---|---|
|1xx: Informational|Communicates transfer protocol–level information|
|2xx: Success|Indicates that the client’s request was accepted|
|3xx: Redirection|Indicates that the client must take some additional action in order to complete the request|
|4xx: Client Error|Indicates that the client has made an error with the request|
|5xx: Server Error|Indicates that an error occurred on the server side|

**Common HTTP Response Status Codes**

|HTTP Status Code|Description|
|---|---|
|200 OK|Everything worked as expected|
|201 CREATED|The request was successful. NETBANX created a new resource and the response body contains the representation|
|202 ACCEPTED|This indicates that the client’s request will be handled asynchronously. It tells the client that the request appears valid, but it still may have problems once it is processed|
|204 NO CONTENT|This is usually returned in response to a PUT, POST, or DELETE request, when the REST API declines to send back any status message or representation in the body of the response message|
|304 NOT MODIFIED|The client's cached version of the representation is still up to date|
|400 BAD REQUEST|This often indicates that a required parameter is missing or that a parameter is invalid. This is a generic client-side error status, used when no other 4xx error code is appropriate|
|401 UNAUTHORIZED|This indicates that the client tried to operate on a protected resource without providing the proper authorization. They may have provided the wrong credentials or none at all|
|402 PAYMENT REQUIRED|The parameters were valid but the request failed|
|404 NOT FOUND|The requested resource does not exist|
|405 METHOD NOT ALLOWED|The client tried to POST or PUT to a resource that would not accept it|
|415 UNSUPPORTED MEDIA TYPE|The request is in a format not supported by the requested resource for the requested method|
|429 TOO MANY REQUESTS|The application is sending too many simultaneous requests|
|500 INTERNAL SERVER ERROR|An error occurred with an internal server|
|502 EXTERNAL SERVER ERROR|We received an invalid response from the upstream gateway in attempting to fulfill the request|

**Error Attributes**

|Element|Type|Description|
|---|---|---|
|Element|Type|Description|
|code|String|This is the error code|
|message|String|This is a description of the error|
|details|Array|This is a detailed description|
|fieldErrors|Array|This is a list of fields that have problems|


**Error message example with details**


```
    {
        "error": {
            "code": "5023",
            "message": "Bad request",
            "details": [
                "Illegal unquoted character ((CTRL-CHAR, code 10)): has to be escaped using backslash to be included in string value at  [line: 2, column: 61]"
            ]
        }
    }
```
 
 
**Error message example with field errors**

```
    {
       "error":{
          "code":5068,
          "message":"Field Error(s)",
          "fieldErrors":[
             {
                "field":"recipientEmail",
                "error":"john@hi@you.c.c.c.c is not a valid e-mail address."
             },
             {
                "field":"transaction.amount",
                "error":"A transaction amount is required."
             },
             {
                "field":"transaction.currency",
                "error":"Currency with value [USD] exceeds the maximum size of [3]."
             }
          ],
          "details":[
               "There are invalid or missing fields in your request."
            ]
       }
    }
```


## Error Codes

These are the error codes common to all subsystems

|HTTP Status   |Code     |Message                                 |Description|
|---           |---      |---                                     |---|
|400           |5001     |Invalid currency                        |The submitted currency code is invalid or your account does not support this currency.|
|              |5010     |Invalid country                         |The submitted country code is invalid.|
|              |5016     |Account not found                       |The account you provided cannot be found.|
|              |5017     |Account disabled                        |The account you provided is disabled.|
|              |5023     |Bad request                             |The request is not parseable.|
|              |5042     |Invalid merchant reference              |This error usually indicates that a transaction was attempted with the merchant reference field missing. This value is mandatory and must be included with your request.|
|              |5068     |Invalid field                           |Either you submitted a request that is missing a mandatory  field or the value of a field does not match the format expected.|
|401           |5275     |Authentication credentials expired      |The authentication credentials provided with the request have expired.|
|              |5276     |Authentication credentials disabled     |The authentication credentials provided with the request provided have been disabled.|
|              |5277     |Authentication credentials locked       |The authentication credentials provided with the request have been locked due to multiple authentication failures.|
|              |5278     |Cannot authenticate                     |The authentication credentials provided with the request were not accepted for an unknown reason.|
|              |5279     |Authentication credentials are invalid  |The authentication credentials are invalid.|
|              |5280     |Authentication credentials not provided |The required authentication credentials were not provided.|
|403           |5270     |Unauthorized access                     |The credentials provided with the request do not have permission to access the requested data.|
|404           |5269     |Entity not found                        |The ID\(s\) specified in the URL do not correspond to the values in the system.|
|              |5273     |URI not found                           |Your client reached our application but we were unable to service your request due to an invalid URL.|
|405           |5281     |Method not supported                    |The request uses an action (e.g., GET, POST, or PUT) that is not supported by the resource.|
|406           |5271     |Unsupported 'Accept' header             |You requested a response in the 'Accept' header that is in an unsupported format.|
|415           |5272     |Unsupported 'Content-Type'              |The 'Content-Type' you specified in request header was submitted in an unsupported format.|
|429           |1200     |API call rate exceeded                  |The API call has been denied as it has exceeded the permissible call rate limit.|
|500           |1000     |Internal error                          |An internal error occurred.|
|              |1001     |Activity Timed Out                      |Your request timed out before it could be completed.  If you receive this error, it is still possible that your request will be successfully processed and you should use the API to verify the status of your request.|
|              |1002     |Database Error                          |An internal error occurred.|
|              |1003     |Decryption Error                        |An internal error occurred.|
|              |1007     |Gateway Error                           |An internal error occurred.|

These errors are specific to the NETELLER REST API.

|HTTP Status |Code   |Message                            |Description|
|---         |---    |---                                |---|
|401         |20000  |Unsupported API request            |You are not registered to use this API|
|401         |20001  |Account closed                     |The account is closed|
|400         |20002  |Merchant account inactive          |Your merchant account is currently inactive.|
|400         |20003  |Invalid merchant account currency  |Your NETELLER Merchant Account does not support this currency.|
|400         |20005  |Duplicate transaction reference    |The provided transaction reference has already been used for another transaction.  You must provide a unique value for each request.|
|400         |20006  |Invalid amount format              |Amount must be numeric and cannot contain decimals or any alpha characters.|
|400         |20007  |Invalid accountId or email         |The specified accountId or email is invalid.|
|400         |20008  |Invalid verification code          |The supplied verification code was not valid for this request.|
|400         |20009  |Invalid customer                   |The supplied customerId is invalid.|
|400         |20010  |Merchant blocked geolocation       |Member is residing in a blocked country/state/region \(merchant has chosen to block members from transacting in that location\)|
|400         |20011  |NETELLER blocked geolocation       |Member is residing in a NETELLER blocked country/state/region.|
|400         |20015  |Member is not entitled             |Member is not entitled to receive this type of transaction.|
|400         |20016  |Merchant is not entitled           |Merchant is not entitled to initiate this type of transaction.|
|402         |20020  |Insufficient balance               |Insufficient balance to complete the transaction.|
|400         |20021  |Below member min transfer amount   |The specified amount is below defined minimum transfer limits.|
|400         |20022  |Above max transfer out amount      |The specified amount is above defined maximum transfer out limits.|
|400         |20025  |Below merchant min transfer amount |The specified amount is below your defined minimum transfer limits.|
|400         |20026  |Above max transfer in amount       |The specified amount is above defined maximum transfer in limits.|
|400         |20030  |Below min transaction limit        |The specified amount is too low. You must specify an amount greater than or equal to 1 unit of currency.|
|400         |20031  |Above max transaction limit        |The specified amount is too high. You must specify an amount within your transactional limit.|
|400         |20035  |Above max account limit            |The transaction exceeds allowed account limits.|
|400         |20040  |Expired                            |The transaction was not completed in the permitted time and has expired.|
|400         |20045  |Merchant declined                  |Transaction was manually cancelled or declined by the merchant.|
|400         |20050  |Legacy transaction details not available from this API, use NetCheck |The transaction you are trying to retrieve was submitted using the legacy NetDirect or Instant Payout API.  Please use NetCheck to retrieve the associated error detail for the transaction.|
|400         |20100  |Plan already exists                |The requested planId has already been used.  Please specify a unique planId with your request.|
|400         |20101  |Cannot delete a subscribed to plan |You cannot delete a subscription plan that has already been subscribed to.   If you wish to prevent further enrollment in this plan then you must cancel the plan.|
|400         |20102  |Invalid term length                |The term length for this subscription plan is invalid.  Please ensure the interval, interval type and interval count combination is less than 5 years.|
|400         |20200  |Existing member email              |The supplied email is already registered with NETELLER. |
|502         |20300  |Processor declined                 |The third party processor has declined the transaction.|
|400         |20301  |NETELLER declined                  |NETELLER has declined to process the transaction.|
|401         |20900  |Request not authorized             |Your request was not authorized as the API requires member authorization.  Please use the authorization_grant flow to obtain member permission for the required scope.|
|503         |20999  |Service unavailable due to scheduled maintentance |The API is currently unavailable due to maintenance activities.|



# Complex JSON Objects

<a name="accountPreferences"></a>

## accountPreferences

|Element                 |Type                   |Description|
|---                     |---                    |---|
|lang                    |string<br/>`length=5`  |The preferred language of the member. See [Languages](#languages) for complete list.|
|currency                |string<br/>`length=3`  |The preferred wallet currency of the member. See [Currencies](#currencies) for complete list.|

```
{
  "lang": "en_US",
  "currency": "EUR"
}
```

<a name="accountProfile"></a>

## accountProfile

|Element                 |Type                                           |Description|
|---                     |---                                            |---|
|email                   |string<br/>`length<=100`                       |The account email address.|
|accountId               |string<br/>`length=15`                         |The 12 digit NETELLER account number.|
|firstName               |string<br/>`length<=25`                        |`required scope: account_basic_profile`<br/>The clients first name, or given name.|
|lastName                |string<br/>`length<=25`                        |`required scope: account_basic_profile`<br/>The clients last name, or family name.|
|address1                |string<br/>`length<=35`                        |`required scope: account_enhanced_profile`<br/>|The clients residential, or street address.|
|address2                |string<br/>`length<=35`                        |`required scope: account_enhanced_profile`<br/>|Continuation of the clients residential, or street address.|
|address3                |string<br/>`length<=35`                        |`required scope: account_enhanced_profile`<br/>|Continuation of the clients residential, or street address.|
|city                    |string<br/>`length<=50`                        |`required scope: account_enhanced_profile`<br/>|The clients city of residence.|
|countrySubdivisionCode  |string<br/>`length=2`                          |`required scope: account_enhanced_profile`<br/>|The ISO 3166-2 code indicating the state/province/district or other value denoting the clients country subdivision \(e.g. BE=Berlin. 13=Tôkyô \[Tokyo\], AB=Alberta\)|
|country                 |string<br/>`length=2`                          |`required scope: account_basic_profile`<br/>|The ISO 3166-1 Alpha 2-code for the clients country of residence \(e.g. Germany = DE, JP=Japan. CA=Canada\).|
|postCode                |string<br/>`length<=10`                        |`required scope: account_enhanced_profile`<br/>|The zip code, or postal code, of the clients residence.|
|contactDetails          |array of [contactDetail](#contactDetail)       |`required scope: account_contacts`<br/>An array of contact numbers.  Can accept up to 2 phone numbers, the first number will be considered primary. Phone numbers should contain no special characters.|
|gender                  |string<br/>`length=1`                          |`required scope: account_enhanced_profile`<br/>m - male, f - female|
|dateOfBirth             |[date](#date)                                  |`required scope: account_basic_profile`<br/>The clients date of birth.|
|accountPreferences      |[accountPreferences](#accountPreferences)      |`required scope: account_enhanced_profile`<br/>The clients preferred language, currency.|

```
{
    "email": "jsmith@email.com",
    "accountId": "451234567890",
    "firstName": "John",
    "lastName": "Smith",
    "address1": "addressline1",
    "address2": "addressline2",
    "address3": "addressline3",
    "city": "Calgary",
    "countrySubdivisionCode": "",
    "postCode": "T8A22J",
    "contactDetails": [
        {
            "type": "landLine",
            "value": "14032332333"
        },
        {
            "type": "mobile",
            "value": "14035552333"
        }
    ],
    "gender": "m",
    "dateOfBirth": {
        "year": "1975",
        "month": "01",
        "day": "31"
    },
    "accountPreferences": {
        "lang": "en",
        "currency": "EUR"
    }
}
```

<a name="attribute"></a>

## attribute

|Element                 |Type                       |Description|
|---                     |---                        |---|
|key                     |string<br/>`length<=50`    |This is a unique identifier for an attribute.|
|value                   |string<br/>`length<=100`   |The value for this attribute.|

```
{
    "key": "affiliate_code",
    "value": "test12345"
}
```

<a name="balance"></a>

## balance

|Element                 |Type                       |Description|
|---                     |---                        |---|
|amount                  |string<br/>`length<=100`   |The amount in the smallest unit of currency.|
|currency                |string<br/>`length<=15`    |The associated currency.|

```
{
    "amount": 3242,
    "currency": "EUR"
}
```

<a name="billingDetail"></a>

## billingDetail

|Element                 |Type                       |Description|
|---                     |---                        |---|
|email                   |string<br/>`length<=100`   |The account email address.|
|firstName               |string<br/>`length<=25`    |The clients first name, or given name.|
|lastName                |string<br/>`length<=25`    |The clients last name, or family name.|
|address1                |string<br/>`length<=35`    |The clients residential, or street address.|
|address2                |string<br/>`length<=35`    |Continuation of the clients residential, or street address.|
|address3                |string<br/>`length<=35`    |Continuation of the clients residential, or street address.|
|city                    |string<br/>`length<=50`    |The clients city of residence.|
|countrySubdivisionCode  |string<br/>`length=2`      |The ISO 3166-2 code indicating the state/province/district or other value denoting the clients country subdivision \(e.g. BE=Berlin. 13=Tôkyô \[Tokyo\], AB=Alberta\)|
|country                 |string<br/>`length=2`      |The ISO 3166-1 Alpha 2-code for the clients country of residence \(e.g. Germany = DE, JP=Japan. CA=Canada\)|
|postCode                |string<br/>`length<=10`    |The zip code, or postal code, of the clients residence.|
|lang                    |string<br/>`length=5`      |The preferred language of communication. See [Languages](#languages) for complete list.|

```
{
    "email": "jsmith@email.com",
    "firstName": "John",
    "lastName": "Smith",
    "address1": "addressline1",
    "address2": "addressline2",
    "address3": "addressline3",
    "city": "Calgary",
    "countrySubdivisionCode": "AB",
    "postCode": "T8A22J",
    "lang": "en"
}
```

<a name="contactDetail"></a>

## contactDetail 

|Element                 |Type                       |Description|
|---                     |---                        |---|
|type                    |string<br/>`length<=10`    |landLine, mobile  ** The values are case sensitive.|
|value                   |string<br/>`length<=30`   |The dialing number or recipients id.  Do not include the country code in the dialing number.|

```
{
    "type": "landLine",
    "value": "4039971234"
}
```

<a name="customer"></a>

## customer

|Element                 |Type                              |Description|
|---                     |---                               |---|
|customerId              |string<br/>`length<=100`          |Unique identifier for this customer.`ie. CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325`|
|accountProfile          |[accountProfile](#accountprofile) |The associated account profile.|
|verificationLevel       |string<br/>length=2               |**00** - Member has not been verified, no verified payment instruments<br/>**01** - Member has not been verified, has one or more verified payment instruments<br/>**10** - Member is verified, no verified payment instruments<br/>**11** - Member is verified, has one or more verified payment instruments|
|availableBalance        |[balance](#balance)               |`required scope: account_available_balance`<br/>The members currently available balance.|

```
{
    "customerId": "CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
    "accountProfile": {
        "email": "jsmith@email.com",
        "accountId": "451234567890",
        "firstName": "John",
        "lastName": "Smith",
        "country": "US",
        "dateOfBirth": {
            "year": "1975",
            "month": "01",
            "day": "31"
        }
    },
    "verificationLevel": "01"
}
```

<a name="date"></a>

## date

|Element     |Type                       |Description|
|---         |---                        |---|
|year        |string<br/>`length=4`      |4 digit year, YYYY|
|month       |string<br/>`length=2`      |2 digit month, MM|
|day         |string<br/>`length=2`      |2 digit day, DD|

```
{
   "year": "1975",
   "month": "01",
   "day": "31"
}
```

<a name="error"></a>

## error

|Element                 |Type                                |Description|
|---                     |---                                 |---|
|code                    |string<br/>`length<=100`            |The error code reflecting the reason for the failed request.|
|message                 |string<br/>`length<=250`            |Short description of the status.|
|fieldErrors             |array of [fielderror](#fielderror)  |If applicable, details around particular fields that reported errors with the API request.|

```
{
    "code": "5018",
    "message": "FieldErrors",
    "fieldErrors": [
        {
            "field": "fieldA",
            "error": "missing required value"
        },
        {
            "field": "fieldC",
            "error": "missing required value"
        }
    ]
}
```

<a name="event"></a>

## event

|Element                 |Type                     |Description|
|---                     |---                      |---|
|mode                    |string<br/>`length<=10`  |test - denotes this is a test webhook notification that was manually triggered<br/>live - this is a live production webhook notification|
|eventDate               |string<br/>`length<=50`  |The date the event occurred. <br/>ISO 8601 format \(UTC\)<Br/>YYYY-MM-DDThh:mm:ssZ|
|eventType               |string<br/>`length<=50`  |The specific type of event that occurred.|
|attemptNumber           |string<br/>`length<=50`  |The current attemptNumber for this notification.  This will increment until we receive a HTTP 200 response on send, or until all retries have been exhausted.|
|key                     |string<br/>`length<=55`  |The optional secret key that you defined with your webhook.  This should be validated within your integration for added security.|
|links                   |array of [link](#link)   |Associated HATEOAS links for this event.  Use these links to lookup the details for this event.|

```
{
     "mode": "test",
     "eventDate": "2014-01-01T00:00:00Z",
     "eventType": "subscription_payment_succeeded",
     "attemptNumber": 1,
     "links": [
         {
             "url": "https://api.neteller.com/v1/payments/434632223423",
             "rel": "payment",
             "method": "GET"
         },
         {
             "url": "https://api.neteller.com/v1/subscriptions/234234224/invoices/99102",
             "rel": "invoice",
             "method": "GET"
         }
     ]
 }
```

<a name="fee"></a>

## fee

|Element                 |Type                       |Description|
|---                     |---                        |---|
|feeName                 |string<br/>`length<=50`    |The name that will display in history and invoice details for this fee item.  \(ie: Setup Fee, Shipping & Handling Fee...etc\).|
|feeType                 |string<br/>`length<=100`   |The type of fee. `ie: service_fee`|
|feeAmount               |number<br/>`length<=10`    |The fee amount that was deducted.<br/>Amount fields reflect the smallest unit of currency with no decimals. Eg. $25.00 USD should be formatted as 2500.|
|feeCurrency             |string<br/>`length<=3 `    |The currency the fee is in. See [Currencies](#currencies) for complete list.|

```
{
   "feeName": "Setup Fee",
   "feeType": "service_fee",
   "feeAmount": 50,
   "feeCurrency": "USD"
}
```

<a name="fielderror"></a>

## fieldError

|Element                 |Type                       |Description|
|---                     |---                        |---|
|field                   |string<br/>`length<=100`   |Identifies the JSON request field.|
|error                   |string<br/>`length<=250`   |The problem associated with field.|

```
{
    "field": "transaction.accountProfile.email",
    "error": "Required field"
}
```

<a name="invoice"></a>

## invoice

|Element                 |Type                                         |Description|
|---                     |---                                          |---|
|invoiceId               |string<br/>`length<=50`                      |Unique identifier for this invoice. \(ie: INV_259e0052-a345-48e9-835c-4f6a8dcaeeb9\).|
|invoiceNumber           |string<br/>`length<=30`                      |Sequential invoice number.|
|invoiceDate             |string<br/>`length<=20`                      |Date the invoice was created \(first issued\).<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ|
|invoiceType             |string<br/>`length<=15`                      |**subscription** - invoice is auto created from subscription billing<br/>**order** - invoice is manually created through a create order api request|
|billingDetails          |array of [billingDetail](#billingdetail)     |The associated billing details for this invoice.|
|subscription            |[subscription](#subscription)                |The corresponding subscription resource this invoice belongs to<br/>** Only applicable for subscription invoices|
|order                   |[order](#order)                              |The corresponding order resource this invoice belongs to<br/>** Only applicable for order invoices|
|status                  |string<br/>`length<=15`                      |**payment\_due** - Indicates that a due payment has not yet been collected and will be re-tried<br/>**paid** - Indicates the payment was successful<br/>**not\_paid** - Indicates the payment was not collected and all attempts to collect payment failed|
|periodStartDate         |string<br/>`length<=20`                      |Date the period for this invoice started<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ<br/>** Only applicable for subscription invoices|
|periodEndDate           |string<br/>`length<=20`                      |Date the period for this invoice ended<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ<br/>** Only applicable for subscription invoices|
|totalAmount             |number<br/>`length<=10`                      |The total amount due reported in the smallest unit of currency \(no decimals\).|
|currency                |string<br/>`length=3`                        |The currency for the amount due.<br/>see Currencies for complete list|
|retryCount              |number                                       |The total number of additional attempts made to try to collect payment for this invoice.   If charge failed due to NSF, the system will automatically retry the transaction up to 3 times.<Br/>** Only applicable for subscription invoices|
|nextRetryDate           |string<br/>`length<=20`                      |The date the charge will be re-attempted.<Br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ<br/>** Only applicable for subscription invoices|

Sample subscription invoice
```
{
    "invoiceId": "INV_259e0052-a345-48e9-835c-4f6a8dcaeeb9",
    "invoiceNumber": "2915",
    "invoiceDate": "2014-06-01T00:00:00Z",
    "invoiceType": "subscription",
    "billingDetails": [
        {
            "email": "jsmith@email.com",
            "firstName": "John",
            "lastName": "Smith",
            "address1": "addressline1",
            "address2": "addressline2",
            "address3": "addressline3",
            "city": "Calgary",
            "countrySubdivisionCode": "",
            "country": "US",
            "postCode": "T8A22J"
        }
    ],
    "subscription": {
        "link": {
            "url": "https://api.neteller.com/v1/subscription/234234224",
            "rel": "subscription",
            "method": "GET"
        }
    },
    "status": "paid",
    "periodStartDate": "2014-06-01T00:00:00Z",
    "periodEndDate": "2014-06-31T00:00:00Z",
    "totalAmount": 2495,
    "currency": "USD",
    "retryCount": 1,
    "nextRetryDate": null
 }
```

Sample order invoice:
```
{
    "invoiceId": "INV_259e0052-a345-48e9-835c-4f6a8dcaeeb9",
    "invoiceNumber": "2915",
    "invoiceDate": "2014-06-01T00:00:00Z",
    "invoiceType": "order",
    "merchantRefId": "1231412412421",
    "billingDetails": [
        {
            "email": "jsmith@email.com",
            "firstName": "John",
            "lastName": "Smith",
            "address1": "addressline1",
            "address2": "addressline2",
            "address3": "addressline3",
            "city": "Calgary",
            "countrySubdivisionCode": "",
            "country": "US",
            "postCode": "T8A22J"
        }
    ],
    "order": {
        "items": [
            {
                "quantity": 1,
                "name": "Item A",
                "description": "Lorem ipsum nunc eget venenatis diam. Integer euismod magna dui, a accumsan elit interdum.",
                "sku": "XYZPART1",
                "amount": 2500
            },
            {
                "quantity": 2,
                "name": "Item B",
                "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet congue orci, ac euismod.",
                "amount": 200
            }
        ],
        "fees": [
            {
                "feeName": "Setup Fee",
                "feeAmount": 500
            }
        ],
        "taxes": [
            {
                "taxName": "VAT",
                "taxAmount": 199
            }
        ]
    },
    "status": "paid",
    "totalAmount": 2495,
    "currency": "USD"
}
```

<a name="item"></a>

## item

|Element             |Type                        |Description|
|---                 |---                         |---|
|amount              |string<br/>`length<=15`     |Amount for a single item.|
|quantity            |number<br/>`length=3`       |Number of items requested.|
|sku                 |string<br/>`length<=50`     |Optional reference for the order item.|
|name                |string<br/>`length<=15`     |Short name for the item.|
|description         |string<br/>`length<=150`    |Description of the item.|

```
{
    "amount": 500,
    "quantity": 2,
    "sku": "id/sku-1",
    "name": "Product A",
    "description": "This is a brief description of Product A."
}
```

<a name="link"></a>

## link

|Element                 |Type                       |Description|
|---                     |---                        |---|
|url                     |string<br/>`length<=500`   |This is the URL to which to send the link. If this is an HTTPS address, please ensure that your certificate is valid – otherwise, the link will cause the browser to display a certificate warning.|
|rel                     |string<br/>`length<=100`   |This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction.  The link relation describes how this link relates to the previous call.- self will get details of the current call|
|method                  |string<br/>`length<=6`     |The HTTP method required for the related call.|

```
{
    "url": "https://api.neteller.com/v1/payments/342342334",
    "rel": "self",
    "method": "GET"
}
```

<a name="order"></a>

## order

|Element                 |Type                                       |Description|
|---                     |---                                        |---|
|orderId                 |string<br/>`length<=100`                   |Unique NETELLER reference for the order. `ie: ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e, SUB_c46645ea-b7b0-4a91-87f7-88c00ec0dea1`|
|merchantRefId           |string<br/>`length<=50`                    |The associated merchant reference id from the initial request.|
|totalAmount             |number                                     |The total amount due for this order, including all items, fees, taxes.|
|currency                |string<br/>`length<=3`                     |The currency of the total amount due.  The order must have the same currency for all items, fees and taxes. <br/>see [Currencies](#currencies) for complete list|
|status                  |string<br/>`length<=20`                    |**pending**<br/>**cancelled**<br/>**failed** - The order was not paid.<br/>**paid**<br/>**expired** - The order had expired \(default: 15 mins\)|
|lang                    |string<br/>`length<=5`                     |The language that the Quick Checkout pages should be displayed in.<br/>see Languages for complete list|
|items                   |Array of [item](#item)                     |Specific line items \(products/fees or services\) that you are requesting payment for.|
|fees                    |Array of [fee](#fee)                       |Specific fees \(setup/shipping&handling, etc.\) that are to be included in the payment.|
|taxes                   |Array of [tax](#tax)                       |Specific taxes\(VAT, GST, PST, etc...\) that are to be included in the payment.|
|customerIp              |string<br/>`length<=20`                    |The value should be the incoming IP address of your customer, which will restrict the payment page to being viewable only from this IP address.|
|paymentMethods          |Array of [paymentMethod](#paymentMethod)   |This allows you to define which payment options you would like to use|
|redirects               |Array of [redirect](#redirect)             |This allows you to add redirects to the order. Redirects cause a connection back to your merchant system via the customer's browser.|
|links                   |Array of [link](#link)                     |Array of HATEOAS links \(if applicable\)<br/>**hosted_payment** – URI for the payment page. Customers should be redirected to this URI to see their invoice and complete payment; or this should be used as the form action on the merchant payment page if using a silent post.<br/>**self** – This URI can be called to return a JSON object about the current status of the order, e.g., to see if the payment has been settled.|

```
{
    "orderId": "ORD_0d676b4b-0eb8-4d78-af25-e41ab431e325",
    "merchantRefId": "124124910192",
    "totalAmount": 3599,
    "currency": "EUR",
    "lang": "en_US",
    "items": [
        {
            "quantity": 1,
            "name": "Item A",
            "description": "Lorem ipsum nunc eget venenatis diam. Integer euismod magna dui, a accumsan elit interdum.",
            "sku": "XYZPART1",
            "amount": 2500
        },
        {
            "quantity": 2,
            "name": "Item B",
            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet congue orci, ac euismod.",
            "amount": 200
        }
    ],
    "fees": [
        {
            "feeName": "Setup Fee",
            "feeAmount": 500
        }
    ],
    "taxes": [
        {
            "taxName": "VAT",
            "taxAmount": 199
        }
    ],
    "paymentMethods": [
       {
           "type": "voucher",
           "value": "ukash"
       }
    ],
    "redirects": [
        {
            "rel": "on_success",
            "returnKeys": [
                "id"
            ],
            "uri": "https://example.com/success.html"
        },
        {
            "rel": "on_cancel",
            "returnKeys": [
                "id"
            ],
            "uri": "https://example.com/cancel.html"
        }
    ],
    "links": [
        {
            "url": "https://api.neteller.com/v1/checkout/ORD_959b1148-704d-4d92-9a7d-14a18990a648",
            "rel": "hosted_payment",
            "method": "GET"
        },
        {
            "url": "https://api.neteller.com/v1/orders/ORD_959b1148-704d-4d92-9a7d-14a18990a648",
            "rel": "self",
            "method": "GET"
        }
    ]
}
```

<a name="payment"></a>

## payment

|Element                 |Type                                   |Description|
|---                     |---                                    |---|
|customer                |[customer](#customer)                  |NETELLER member account details for this transaction \(if applicable\).|
|billingDetail<br/>      |[billingDetail](#billingDetail)        |Billing details for this transaction, if paid as a guest and is not associated with a NETELLER account.|
|transaction<br/>        |[transaction](#transaction)            |Associated transaction details.|

Sample payment from NETELLER account holder
```
{
    "customer": {
        "link": {
            "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
            "rel": "customer",
            "method": "GET"
        }
    },
    "transaction": {
        "merchantRefId": "9876543210",
        "amount": 2500,
        "currency": "USD",
        "id": "288382647322027",
        "createDate": "2013-06-22T14:33:12",
        "updateDate": "2013-06-22T16:21:52",
        "status": "approved",
        "fees": [
            {
                "feeType": "service_fee",
                "feeAmount": 50,
                "feeCurrency": "USD"
            }
        ]
    }
}
```

Sample payment from guest
```
{
    "billingDetail": {
            "email": "jsmith@email.com",
            "firstName": "John",
            "lastName": "Smith",
            "address1": "addressline1",
            "address2": "addressline2",
            "address3": "addressline3",
            "city": "Calgary",
            "countrySubdivisionCode": "",
            "country": "US",
            "postCode": "T8A22J",
            "lang": "en"
    },
    "transaction": {
        "merchantRefId": "9876543210",
        "amount": 2500,
        "currency": "USD",
        "id": "288382647322027",
        "createDate": "2013-06-22T14:33:12",
        "updateDate": "2013-06-22T16:21:52",
        "status": "approved",
        "fees": [
            {
                "feeType": "service_fee",
                "feeAmount": 50,
                "feeCurrency": "USD"
            }
        ]
    }
}
```

<a name="paymentmethod"></a>

## paymentMethod

|Element  |Type                       |Description|
|---      |---                        |---|
|type     |string<br/>`length<=15`    |Identifies the type of payment method.|
|value    |string<br/>`length<=100`   |Further Identifies the payment type, and the source of funds for a payment.|


> For outgoing transfers you can only use NETELLER Account ID to identify the recipient whey they already have a registered NETELLER account, for non-account holders you must specify the recipients email address.
> When in doubt, use of email will ensure the recipient can still complete the signup process and receive their funds.
> When specifying neteller as paymentMethod for a NETELLERgo order, the value will be ignored as your checkout
> will be prefilled from supplied billingDetails instead.

*Permitted Values:*

|Type               |Value                                                       |Supported Processing Currencies|
|---                |---                                                         |---|
|neteller           |The NETELLER account holders email address \(preferred\)<br/> <b>OR</b> <br/>The account holders 12 digit NETELLER account ID|See Currencies|
|voucher            |paysafecard                                                 |EUR, GBP, CHF, BGN, CZK, DKK, HRK, HUF, NOK, PLN, RON, SEK|
|onlinebanking      |sofortbanking                                               |EUR|
|onlinebanking      |poli                                                        |AUD|
|onlinebanking      |giropay                                                     |EUR|
|onlinebanking      |ideal                                                       |EUR|
|onlinebanking      |bradesco                                                    |USD<br/>Max $500 transaction, $3000 month per customer|
|onlinebanking      |itau                                                        |USD|
|onlinebanking      |bancodobrasil                                               |USD<br/>Max $500 transaction, $3000 month per customer|
|onlinebanking      |webpay                                                      |USD|
|onlinebanking      |qiwi                                                        |RUB|
|onlinebanking      |webmoney                                                    |RUB|
|onlinebanking      |yandex                                                      |RUB|
|digitalcurrency    |bitcoin                                                     |GBP, USD, EUR|
|carrierbilling     |boku                                                        |DKK, SEK, CHF, GBP|


```
{
    "type": "voucher",
    "value": "ukash"
} 
```

<a name="plan"></a>

## plan

|Element                 |Type                       |Description|
|---                     |---                        |---|
|planId                  |string<br/>`length<=50`    |A unique identifier for the plan that you will use to identify which plan you want to enroll your customer in.|
|planName                |string<br/>`length<=200`   |The display name for the plan.|
|interval                |number<br/>`length<=3`     |The number of intervals between each billing attempt.<br/>\(ie: to bill every 15 days, you would select an interval of 15 and a type of daily\).|
|intervalType            |string<br/>`length<=10`    |The type of interval you wish want to define. <br/>**daily**<br/>**weekly**<br/>**monthly**<br/>**yearly**|
|intervalCount           |number<br/>`length<=3`     |The length of the contract in intervals, or how many recurring billings will be attempted.<br/>intervalCount * interval = Total Subscription Term \(duration)<br/>(ie: For a yearly subscription billing every 3 months, this would be 4\)|
|amount                  |number                     |The amount to bill for each re-ocurrence.|
|currency                |string<br/>`length=3`      |The currency of the amount to be billed.|
|status                  |string<br/>`length<=15`    |**pending** - The subscription has been requested and is pending activation \(start date has not yet elapsed\).<br/>**active** - The subscription plan is currently active<br/>**cancelled** - The subscription plan was cancelled and can no longer be subscribed to|
|numberofSubscriptions   |number                     |The number of subscriptions that were enrolled under a plan.  This includes cancelled and ended subscriptions.|

```
{
    "planId": "SAMPLEMONTHLY",
    "planName": "Sample Premier Monthly Plan",
    "interval": 3
    "intervalType": "monthly",
    "intervalCount": 4,
    "amount": 2495,
    "currency": "EUR".
    "status": "active",
    "numberOfSubscriptions": 2
}
```

<a name="redirect"></a>

## redirect

|Element                 |Type                              |Description|
|---                     |---                               |---|
|rel                     |string<br/>`length<=15`           |This is the redirect type, allowing different endpoints to be targeted depending on the end state of the transaction. <br/>Possible values are:<br/>**on_success**<br/>**on_pending**<br/>**on_error**<br/>**on_decline**<br/>**on_cancel**<br/>**on_timeout**|
|url                     |string                            |

```
{
    "rel": "on_success",
    "uri": "https://example.com/success.html"
}
```

<a name="subscription"></a>

## subscription

|Element                       |Type                       |Description|
|---                           |---                        |---|
|subscriptionId                |string<br/>`length<=50`    |A system generated value that uniquely identifies this subscription.|
|plan                          |[plan](#plan)              |The associated subscription plan that the subscription is for.|
|customer                      |[customer](#customer)      |The associated customer for this subscription.|
|status                        |string<br/>`length<=15`    |**pending** - A subscription has been requested and is pending activation upon the requested start date<br/>**active** - The subscription is currently active<br/>**cancelled** - The subscription was cancelled by the subscriber or by the merchant application<br/>**ended** - The subscription has lapsed<br/>**failed** - The subscription request failed.  This status will only be set if the subscription was created with no startDate supplied and the immediate billing failed.|
|startDate                     |string<br/>`length=20`<br/>> current date |Date the subscription should start.  If startDate is not supplied, the customer will be billed immediately.  If supplying a subscription startDate, the date must be greater then the current date.<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ|
|endDate                       |string<br/>`length=20`     |If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ|
|currentPeriodStart            |string<br/>`length=20`     |Start of the current period that the subscription has been invoiced for.<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ|
|currentPeriodEnd              |string<br/>`length=20`     |End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ|
|cancelAtPeriodEnd             |boolean                    |If the subscription has been canceled with the atPeriodEnd flag set to true, then this value on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.|
|canceledDate                  |string<br/>`length=20`     |If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancelAtPeriodEnd, canceledDate will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.<br/>ISO 8601 format (UTC)<br/>YYYY-MM-DDThh:mm:ssZ|
|lastCompletedPaymentDate      |string<br/>`length=20`     |The date the last successful payment was processed for this subscription<br/>ISO 8601 format \(UTC\)<br/>YYYY-MM-DDThh:mm:ssZ|

```
{ 
    "subscriptionId": "234234224",
    "plan": {
        "link": {           {
                "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                "rel": "subscriptionPlan",
                "method": "GET"
        }
    },
    "customer": {
        "link": {
            "url": "https://api.neteller.com/v1/customers/CUST_0d676b4b-0eb8-4d78-af25-e41ab431e325",
            "rel": "customer",
            "method": "GET"
        }
    },
    "status": "active",
    "startDate": "2014-06-01T00:00:00Z",
    "endDate": "2014-12-31T00:00:00Z",
    "currentPeriodStart": "2014-07-01T00:00:00Z",
    "currentPeriodEnd": "2014-07-31T00:00:00Z",
    "cancelAtPeriodEnd": false,
    "cancelDate":  null,
    "lastCompletedPaymentDate":  "2014-06-01T00:00:00Z"
}
```

<a name="tax"></a>

## tax

|Element                 |Type                       |Description|
|---                     |---                        |---|
|taxName                 |string<br/>`length<=50`    |The name that will display in history and invoice details for this tax item.  \(ie: VAT, GST, PST...etc\)|
|taxAmount               |number<br/>`length<=10`    |The amount of the tax.<br/>Amount fields reflect the smallest unit of currency with no decimals. Eg. $25.00 USD should be formatted as 2500.|
|taxCurrency             |string<br/>`length<=3`     |The currency the tax is in.<br/>See [Currencies](#currencies) for complete list.|

```
{
    "taxName": "VAT",
    "taxAmount": 50,
    "taxCurrency": "USD"
}
```

<a name="token"></a>

## token

|Element                  |Type                       |Description|
|---                      |---                        |---|
|tokenType                |string<br/>`length<=50`    |The type of access token that was issued.  Currently only 'Bearer' tokens are supported.|
|expiresIn                |number                     |How much time in seconds until the token expires.|
|accessToken              |string<br/>`length<=200`   |The access token to pass in the API call to access the protected resource.|
|refreshToken             |string<br/>`length<=200`   |The token to use to obtain a new access token with the same permissions \(scope\) previously authorized.|

```
{
    "tokenType": "Bearer",
    "expiresIn": 300,
    "accessToken": "28A8J23k2l3k7322027",
    "refreshToken" "28A8J23k2l3k73220273245334"
}
```

<a name="transaction"></a>

## transaction

|Element                 |Type                       |Description|
|---                     |---                        |---|
|amount                  |number<br/>`length<=15`    |The amount of the transaction.<br/>Amount fields reflect the smallest unit of currency with no decimals. Eg. $25.00 USD should be formatted as 2500 whereas 2500 JPY should be formatted as 2500.|
|createDate              |string<br/>`length<=20`    |ISO 8601 format \(UTC\)<br/>The timestamp when the transaction was requested.<br/>YYYY-MM-DDThh:mm:ssZ|
|currency                |string<br/>`length<=3`     |The currency of the transaction.|
|errorCode               |string<br/>`length<=100`   |If applicable, the corresponding code for why this transaction was not accepted.<br/>see REST API Errors|
|errorMessage            |string<br/>`length<=250`   |If applicable, the corresponding reason for why this transaction was not accepted.<br/>see REST API Errors|
|fees                    |array of [fee](#fee)       |List of fees associated with this transaction.|
|id                      |number                     |The transaction id that identifies this transaction within the NETELLER system.  The returned id is considered a transaction group id and can be used to identify both sides of a transfer.|
|merchantRefId           |string<br/>`length<=50`    |The external merchant transaction id that uniquely identifies this transaction within the merchant system.|
|status                  |string<br/>`length<=20`    |**accepted**<br/>**pending**<br/>**declined**<br/>**cancelled**<br/>**failed**|
|transactionType         |string<br/>`length<=50`    |Indicates the type of transaction or specific product for the transaction.|
|updateDate              |string<br/>`length<=20`    |ISO 8601 format \(UTC\)<br/>The timestamp when the transaction was last updated.<br/>YYYY-MM-DDThh:mm:ssZ|

```
{
    "merchantRefId": "9876543210",
    "amount": 2500,
    "currency": "USD",
    "id": "288382647322027",
    "transactionType": "Sofort (Order)",
    "createDate": "2013-06-22T14:33:12",
    "updateDate": "2013-06-22T16:21:52",
    "status": "pending",
    "fees": [
        {
            "feeType": "service_fee",
            "feeAmount": 50,
            "feeCurrency": "USD"
        }
    ]
}
```


# Test Member Accounts

> The following member accounts are available in the sandbox environment for testing purposes.  
> These accounts should never be used in production and are only intended for use in testing with 
> the test.api.neteller.com endpoint.  The password supplied here can be used for testing the 
> Authorization flows for a particular account.

|Currency|Account ID|Email Address|Secure ID|Password|
|---|---|---|---|---|
|AED|451323763077|netellertest_AED@neteller.com|315508|NTt3st1!|
|AUD|451823760529|netellertest_AUD@neteller.com|521652|NTt3st1!|
|BGN|450424149137|netellertest_BGN@neteller.com|354380|NTt3st1!|
|BRL|452124231445|netellertest_BRL@neteller.com|907916|NTt3st1!|
|CAD|455781454840|netellertest_CAD@neteller.com|755608|NTt3st1!|
|CHF|452324249609|netellertest_CHF@neteller.com|372993|NTt3st1!|
|COP|458423552244|netellertest_COP@neteller.com|309874|NTt3st1!|
|CNY|452623099264|netellertest_CNY@neteller.com|364446|NTt3st1!|
|DKK|459734233011|netellertest_DKK@neteller.com|856751|NTt3st1!|
|EUR|453501020503|netellertest_EUR@neteller.com|908379|NTt3st1!|
|GBP|458591047553|netellertest_GBP@neteller.com|411392|NTt3st1!|
|HUF|450824149649|netellertest_HUF@neteller.com|363552|NTt3st1!|
|INR|450824016049|netellertest_INR@neteller.com|332880|NTt3st1!|
|JPY|452604251512|netellertest_JPY@neteller.com|490055|NTt3st1!|
|MAD|453123727913|netellertest_MAD@neteller.com|796289|NTt3st1!|
|MXN|456444237546|netellertest_MXN@neteller.com|878408|NTt3st1!|
|MYR|452724116521|netellertest_MYR@neteller.com|108145|NTt3st1!|
|NGN|450924006321|netellertest_NGN@neteller.com|205750|NTt3st1!|
|NOK|455394172769|netellertest_NOK@neteller.com|418852|NTt3st1!|
|PLN|451823629489|netellertest_PLN@neteller.com|654091|NTt3st1!|
|RON|450424018097|netellertest_RON@neteller.com|860647|NTt3st1!|
|RUB|455121038904|netellertest_RUB@neteller.com|888470|NTt3st1!|
|SEK|453313818311|netellertest_SEK@neteller.com|173419|NTt3st1!|
|SGD|451523741861|netellertest_SGD@neteller.com|316938|NTt3st1!|
|TND|453523858985|netellertest_TND@neteller.com|588931|NTt3st1!|
|TWD|451723748785|netellertest_TWD@neteller.com|711009|NTt3st1!|
|USD|454651018446|netellertest_USD@neteller.com|270955|NTt3st1!|
|ZAR|453523842837|netellertest_ZAR@neteller.com|708904|NTt3st1!|


# FAQ

**How long is a refresh token valid?**

A refresh token is valid until the member removes the permission or authorizes new permission which causes a new refresh token is issued.  The maximum lifespan for a refresh is a period of 1 year from when it was issued 

**What is a trusted device?**

A device that you have successfully authenticated to your NETELLER account from.  Your trusted devices are visible and can be managed through the member portal settings page.



# Authorization [/oauth2]


## Obtain an access token using client credentials [POST /oauth2/token?grant_type={grantType}]

The Authorization header should be constructed to pass a base64 encoded version of these values (client\_id:client\_secret).  
If you are testing using cURL or a browser client, you can specify the HTTP Basic credentials by using the client\_id as your 
username and client\_secret as your password.

> The client_secret for your application should not be shared with anyone or embedded in any code that you will distribute.  This exclusion also extends to an app binary that could be de-compiled.  This API call should only be made using server-side code over TLS.

+ Parameters

    + grantType (required, string, `client_credentials`) - The specific grant\_type, set this value to client\_credentials.
    
+ Request Obtain a token using your client credentials (multipart/form-data)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-CREDENTIALS

+ Response 201 (application/json)

    + Attributes
        + Include accessToken    


## Obtain an access token using auth code [GET /oauth2/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}&lang={lang}]

The authorization grant flow has two parts and utilizes two authorization server endpoints.  

> Refer to the OAUTH Authenitcation overview in the Technical Introduction for more information.

1) Authorization Endpoint - used to obtain authorization (auth_code) from the resource owner via user-agent redirection.  
Your application redirects the member to NETELLER where they are asked to grant the requested permissions.  if the member approves, 
NETELLER will post back to your redirect uri with a unique authorization code that represents this members acknowledgement of your request.

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/auth_code-grant-type-1.png)

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/auth_code-grant-type-2.png)

2) Token Endpoint - used to exchange the auth\_code, or previously issued refresh\_token for an new access token to use with your 
REST API calls.  This process can be repeated until authorization is revoked by the member or until different permissions are required.
 
> When invoking this flow, you must pass in the redirect\_uri that the user's browser will be redirected back to once app authorization is completed. The redirect_uri must be the same URI you specify when registering 
> your web application OR must be the same one that was passed in the original authorization call.

+ Parameters

    + `clientId` (required, string) - Your APP client id
    + `redirectUri` (optional, string) - The uri that the users browser will be redirected back to once app authorization is completed. 
    
        <br/><br/>If supplied during this authorization request, the same uri must be supplied in the call to the token endpoint.  When not supplied, the default registered redirect uri will be used. The redirect\_uri must secured over TLS \(https://\)
      
    + `scope` (required, string) - The supplied scope parameter will indicate the level of access you require for your app. 
    
        <br/><br/>The scope parameter MUST be supplied.  If your application requires multiple scopes then you should supply a comma separated list.  Eg. scope=perm1,perm2
        
        + Members
            + `account_basic_profile`
            + `account_enhanced_profile`
            + `account_available_balance`
            + `account_contacts`
            + `subscription_payment`
        
    + `lang` (optional, string) - The preferred language to render the authorization flow in.
    
        + Default: `en_US`
        
        + Members
            + `da_DK` - Danish
            + `de_DE` - German
            + `el_GR` - Greek
            + `en_US` - English
            + `es_ES` - Spanish
            + `fr_FR` - French
            + `it_IT` - Italian
            + `ja_JP` - Japanese
            + `ko_KR` - Korean
            + `no_NO` - Norwegian
            + `pl_PL` - Polish
            + `pt_PT` - Portuguese
            + `ru_RU` - Russian
            + `sv_SE` - Swedish
            + `tr_TR` - Turkish

+ Request Obtain authorization (text/html)

+ Response 200 (application/json)

### Exchange your authorization code for an access token [POST /oauth2/token?grant_type={grantType}&code={code}&redirect_uri={redirectUri}]

Once you have received member authorization, you can exchange your authorization_code for an access token.  

+ Parameters

    + `grantType`: `authorization_code` (required, string) - The type of grant
    + `code`: `0.AgAAAUnPnWEeAAAAB1jwsOAq6iK0G2op1zi_sQC3KE22.oD4wHNZjuF5tWOZh2ozEpi2E7BE` (required,string) - Set to the auth_code previously received from the authorization server.
    + `redirectUri` (optional, string) - The TLS enabled redirection uri that will be returned to. 
    
        This value must match the uri used to obtain authorization, If not supplied during the authorization flow then the redirect\_uri will be the registered redirect uri for your application \(as set in the merchant.com portal under the APPS section\) and should not be passed.


+ Request Obtain authorization (application/json)

    + Headers
        
            Authorization: Basic YOUR_BASE64_ENCODED_CREDENTIALS


+ Response 201 (application/json)

    + Attributes
    
        + Include refreshToken


### Exchange your refresh token for an access token [POST /oauth2/token?grant_type={grantType}&refresh_token={refreshToken}]

If the previously issued access token has expired (obtained from the authorization grant flow) 
and you receive a HTTP 401 - Unauthorized error, you can utilize the refresh token that was issued to you with the 
initial authorization response to obtain a new one.

+ Parameters
    + `grantType` (required, string) - The type of grant
    + `refreshToken` (required,string) - The refresh token previously issued to the client

+ Request Obtain authorization (application/json)

    + Parameters
        + `grant_type`: refresh_token
        + `refresh_token`: 0.AgAAAUnPnWEeAAAAB1jwsOAq6iK0G2op1zi_sQC3KE22.oD4wHNZjuF5tWOZh2ozEpi2E7BE

    + Headers
        
            Authorization: Basic YOUR_BASE64_ENCODED_CREDENTIALS

+ Response 201 (application/json)

    + Attributes
    
        + Include refreshToken



# Payments [/]

The payments resource is available to facilitate the transfer of funds between accounts within the NETELLER system. A payment to a non-registered NETELLER member can optionally include profile 
information (including email, name, address, phone, birthdate)  that will be used to enhance the signup experience for new members, so they do not have to re-key in information that is already available in your system.


## Send Payment [POST /transferOut]

This is an outbound payment request and will issue a payment from your merchant account to the desired recipient account. You
can push funds to a NETELLER account holder or any valid email and NETELLER will notify the recipient via email of the payment. 

If the recipient is already a NETELLER member, the funds will be immediately deposited in their account. If the recipient is not
an existing NETELLER account holder, they will be required to complete their registration in order to have access to the funds.  A 
reference URL to the signup flows will be returned in the payment request response so you can optionally direct the member to 
complete the registration process.  

If you provide additional profile information with your payment request (such as name, address)
and the recipient is not an account holder, the profile information will be used to pre-populate the signup pages when you redirect 
the customer to the returned uri.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none \(default\)|
|**Scope(s) impacting response**|account\_enhanced\_profile, account\_contact|
|**Expandable Resources**|customer|
|**Related Resources (if applicable)**|none|

+ Request Send payment to email (application/json)

    + Attributes
        + `payeeProfile` (accountProfileBase, required) - The recipient of the payment. At minimum, the payee's email address or NETELLER Account ID must be supplied.
        + `ransaction` (transactionBase, required) - Details about the payment.
        + `message`: `Sample message` (string, optional) - The message what will be shown  to the member notifying them of the pending transfer.

    + Headers
            
            Authorization: Bearer YOUR-ACCESS-TOKEN

            
+ Response 201 (application/json)

    + Attributes
        + `customer` (object, required) -The associated customer information for the payment.
            + `link`
                + `url`: `https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325`
                + `rel`: `customer`
                + `method`: `GET`
        + `transaction` (transaction, required) - Details about the payment.
        + Include links
        

+ Request Send payment to non-registered email with profile data to provide a signup link (application/json)

    + Attributes
        + `payeeProfile` (accountProfile, required) - The recipient of the payment. At minimum, the payee's email address or NETELLER Account ID must be supplied.
        + `transaction` (transactionBase, required) - Details about the payment.
        + `message`: `Sample message` (string, optional) - The message what will be shown  to the member notifying them of the pending transfer.
    
    + Headers
    
                Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 201 (application/json)

    + Attributes
        + `customer` (customer, required) -The associated customer information for the payment.
        + `transaction` (transaction, required) - Details about the payment.
        + `links` (array) - Array of HATEOAS links (if applicable).
              + (object)
                + `url`: `https://api.neteller.com/v1/payments/129391454779189`
                + `rel`: `self`
                + `method`: `GET`
              + (object)
                + `url`: `https://api.neteller.com/v1/54779189`
                + `rel`: `member_signup_redirect`
                + `method`: `GET`        
    + Headers

            Location: /v1/transferOut
            

## Request payment [POST /transferIn]

This is an inbound payment request and will faciliate collecting payment from a NETELLER member to your merchant account.
<br/><br/>
For this flow, you will required to render a secure browser form where the member is required to enter the amount they 
wish to transfer and confirm their request by supplying their verification code (their Secure Id or Google Authenticator OTP).
If approved, funds will immediately be pulled from the member account and deposited in your merchant account.

NETELLER will notify the sender via email of the completed payment.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none (default)|
|**Scope(s) impacting response**|account\_enhanced\_profile, account\_contact|
|**Expandable Resources**|customer|
|**Related Resources (if applicable)**|none|

+ Request Receive payment from a NETELLER account holder (application/json)

    + Attributes
        + `paymentMethod` (paymentMethod, required) - The source of funds for the transfer into the merchant account.
        + `transaction` (transaction, optional) - Details about the payment.
        + `verificationCode` (string) - The member verification code for the transaction.   This is the members 6 digit Secure Id, or Authentication Code OTP \(one time password\) if the member has two step authentication enabled.
        
    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN
    
    + Body            
```
            {
                "paymentMethod": {
                    "type": "neteller",
                    "value": "gb_gbp@neteller.com"
                },
                "transaction": {
                    "merchantRefId": "20140203122501",
                    "amount": 5000,
                    "currency": "USD"
                },
                "verificationCode": "234124"
            }
```

+ Response 201 (application/json)

    + Attributes
        + `customer` (object, required) -The associated customer information for the payment.
        + `transaction` (object, required) - Details about the payment.
        + `links` ([string], optional) - Array of HATEOAS links (if applicable).
        
    + Body
```
            {
                "customer": {
                    "link": {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                        "rel": "customer",
                        "method": "GET"
                    }
                },
                "transaction": {
                    "merchantRefId": "20140203122501",
                    "amount": 5000,
                    "currency": "USD",
                    "id": "672391456803770",
                    "createDate": "2014-02-03T19:46:44Z",
                    "updateDate": "2014-02-03T19:46:44Z",
                    "status": "accepted",
                    "fees": [
                        {
                            "feeType": "service_fee",
                            "feeAmount": 195,
                            "feeCurrency": "USD"
                        }
                    ]
                },
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/payments/672391456803770",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## Lookup a payment [GET /payments/{id}?refType={refType}&expand={expand}]

The payments lookup function can be use to inquire about any API intiated transactions. Additional detail will be provided depending on the transaction type 
and the current state of the transaction.

This API request returns a [payment](#payment) object.  The response object values vary dependent upon the type of payment that is being queried.

When performing a look up using your merchant reference id, you must 
also pass the parameter of **?refType=merchantRefId** to denote that your are 
querying with your merchant reference ID and not the NETELLER Transaction ID.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none (default)|
|**Scope(s) impacting response**|account\_enhanced\_profile, account\_contact|
|**Expandable Resources**|customer|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `id` (required, string) - ID of the transaction.    
    + `refType` (string, optional) - Optional ID type. 
                           <br/>ie: /v1/payments/myXYZid?refType=merchantRefId
                           <br/>When not specified the ID defaults to the NETELLER
                           <br/>transaction id returned in the intial response.
        + Members
            + `merchantRefId`

    + expand (string, optional) - Name of the resource to expand inline in the response.

        <br/><br/>You can choose to include the expanded detail for the following resources.

        + Members
            + `customer`


+ Request (application/json)

    + Parameter
        + id: 672391456803770

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)

    + Attributes
        + `customer` (object, required) - The associated customer information for the payment (if applicable).
        + `billingDetail` (object, optional) - The associated billing details for the transaction (if applicable). NETELLERgo! orders should always return billing details.
        + `transaction` (object, required) - Details about the payment.
        + `links` ([string], optional) - Array of HATEOAS links (if applicable).


    + Body
```
            {
                "customer": {
                    "link": {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                        "rel": "customer",
                        "method": "GET"
                    }
                },
                "transaction": {
                    "merchantRefId": "20140203122501",
                    "amount": 5000,
                    "currency": "USD",
                    "id": "672391456803770",
                    "createDate": "2014-02-03T19:46:44Z",
                    "updateDate": "2014-02-03T19:46:44Z",
                    "status": "accepted",
                    "fees": [
                        {
                            "feeType": "service_fee",
                            "feeAmount": 195,
                            "feeCurrency": "USD"
                        }
                    ]
                },
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/payments/672391456803770",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## List payments [GET /payments/?&startDate={startDate}&endDate={endDate}&sortOrder={sortOrder}&limit={limit}&offset={offset}]

The payments lookup function can be used to retrieve a listing of transactions associated with your account.

This API request returns a list of [payment](#payment) objects.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none (default)|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|customer|

+ Parameters
    + `startDate` (optional, string) - Start date of transaction report.  If not supplied the default is past 7 days.
    + `endDate` (optional, string) - End date of transaction report.  If you supply and endDate you must also supply a startDate.
    + `sortOrder` (string, optional) - Optional sort order.  Default is descending based on transaction date. 

        + Members
            + `asc`
            + `desc`
            
    
    + `limit` (optional, number) - The number of records to be returned. Default = 10; Max = 100.
    + `offset` (optional, number) - Allows you to fetch the next set of resources.
    
+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)

    + Attributes
    
        + `list` (array) - A collection of associated payment objects.
            + `customer` (required) - The associated customer information for the payment (if applicable).
            + `billingDetail` (optional) - The associated billingDetail for the transaction (if applicable).
            + `transaction` (required) - Details about the payment.
        + `links` ([string], optional) - Array of HATEOAS links (if applicable).


    + Body
```
            {
                "meta": {
                    "numberOfRecords": 77,
                    "limit": 10,
                    "page": 1
                },
                "list": [{
                    "customer": {
                        "link": {
                            "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                            "rel": "customer",
                            "method": "GET"
                        }
                    },
                    "transaction": {
                        "merchantRefId": "9876543210",
                        "amount": 2500,
                        "currency": "USD",
                        "id": "288382647322027",
                        "transactionType": "Member to Merchant Transfer",
                        "createDate": "2013-06-22T14:33:12",
                        "updateDate": "2013-06-22T16:21:52",
                        "status": "approved",
                        "fees": [{
                            "feeType": "service_fee",
                            "feeAmount": 50,
                            "feeCurrency": "USD"
                        }]
                    }
                }, 
                "links": [{
                    "url": "https://api.neteller.com/v1/payments?sessionid=234243242&limit=10&offset=10",
                    "rel": "self",
                    "method": "GET"
                },  {
                    "url": "https://api.neteller.com/v1/payments?sessionid=234243242&limit=10&offset=0",
                    "rel": "prev_offset",
                    "method": "GET"
                }, {
                    "url": "https://api.neteller.com/v1/payments?sessionid=234243242&limit=10&offset=20",
                    "rel": "next_offset",
                    "method": "GET"
                }]
            }
```

# Orders [/orders]

Order processing utilizes a hosted payment solution, also known as NETELLERgo!.  This hosted solution allows you 
to begin collecting payments from your customers with minimal custom development.  

![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/go-de-options.png)

> Contact the NETELLER Merchant Support team to have additional payment methods enabled for your merchant account, 
> or to find out what payment methods are available for a particular country.   See the paymentMethod object 
> description for more information.
> <Br/><br/>
> NETELLERgo! does not support iframes. It must be implemented as a browser redirect and not an inline iframe.

> Never rely on a redirection to determine the end state of a transaction, as they can fail or be tampered with. Always use a webhook and/or appropriate callback to obtain the transaction status.

## Create an order [POST]

Create an order by passing the revelant details to the /orders endpoint, NETELLER will respond with a link that 
you then re-direct your customer where they are offered the ability to pay using their NETELLER account or with 
one of numerous alternative payment methods.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|hosted_payment|

+ Request Create an order (application/json)

    + Attributes
        + Include order
        + Include billingDetails
        + Include links

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN
            
    + Body            
```    
            {
                "order": {
                    "merchantRefId": "123456666",
                    "totalAmount": 3599,
                    "currency": "EUR",
                    "lang": "en_US",
                    "items": [
                        {
                            "quantity": 1,
                            "name": "Item A",
                            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eget venenatis diam. Integer euismod magna dui, a accumsan elit interdum.",
                            "sku": "XYZPART1",
                            "amount": 2500
                        },
                        {
                            "quantity": 2,
                            "name": "Item B",
                            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet congue orci, ac euismod.",
                            "amount": 200
                        }
                    ],
                    "fees": [
                        {
                            "feeName": "Setup Fee",
                            "feeAmount": 500
                        }
                    ],
                    "taxes": [
                        {
                            "taxName": "VAT",
                            "taxAmount": 199
                        }
                    ],
                    "redirects": [
                        {
                            "rel": "on_success",
                            "uri": "https://example.com/success.html"
                        },
                        {
                            "rel": "on_cancel",
                            "uri": "https://example.com/cancel.html"
                        }
                    ]
                }
            }
```

+ Response 201 (application/json)


    + Body
```        
            {
                "orderId": "ORD_959b1148-704d-4d92-9a7d-14a18990a648",
                "merchantRefId": "20141022142300",
                "totalAmount": 3599,
                "currency": "EUR",
                "status": "pending",
                "lang": "en_US",
                "items": [
                    {
                        "amount": 2500,
                        "quantity": 1,
                        "sku": "XYZPART1",
                        "name": "Item A",
                        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eget venenatis diam. Integer euismod magna dui, a accumsan elit interdum."
                    },
                    {
                        "amount": 200,
                        "quantity": 2,
                        "sku": "",
                        "name": "Item B",
                        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet congue orci, ac euismod."
                    }
                ],
                "fees": [
                    {
                        "feeAmount": 500,
                        "feeName": "Setup Fee"
                    }
                ],
                "taxes": [
                    {
                        "taxAmount": 199,
                        "taxName": "VAT"
                    }
                ],
                "paymentMethods": [
                    {
                        "type": "voucher",
                        "value": "ukash"
                    }
                ],
                "redirects": [
                    {
                        "rel": "on_success",
                        "uri": "https://example.com/success.html"
                    },
                    {
                        "rel": "on_cancel",
                        "uri": "https://example.com/cancel.html"
                    }
                ],
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/checkout/ORD_959b1148-704d-4d92-9a7d-14a18990a648",
                        "rel": "hosted_payment",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/orders/ORD_959b1148-704d-4d92-9a7d-14a18990a648",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## Lookup an order [GET /v1/orders/{orderId}]

The details of an order can be queried from the API at any time. A self link is included in the order link section,
which can be used to look up the status of the order. Alternatively, the order endpoint can be called directly as 
a GET request on the order id: 

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|hosted_payment, invoice, payment|

+ Parameters

    + orderId (string, required) - The unique identifier for the order.

+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN
            


+ Response 200 (application/json)


    + Body
```
            {
                "orderId": "ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e",
                "merchantRefId": "123456666",
                "totalAmount": 3599,
                "currency": "EUR",
                "status": "pending",
                "lang": "en_US",
                "items": [
                    {
                        "quantity": 2,
                        "name": "Item B",
                        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit amet congue orci, ac euismod.",       
                        "amount": 200
                    }
                ],
                "fees": [
                    {
                        "feeName" : "Setup Fee",
                        "feeAmount": 500
                    }
                ],
                "taxes": [
                    {
                        "taxName": "VAT"
                        "taxAmount": 199,
                    }
                ],
                "paymentMethods": [
                   {
                       "type": "voucher",
                       "value": "ukash"
                   }
                ],
                "redirects": [
                    {
                        "rel": "on_success",
                        "uri": "https://example.com/success.html"
                    },
                    {
                        "rel": "on_cancel",
                        "uri": "https://example.com/cancel.html"
                    }
                ],
                "links": [
                    {
                       "url": "https://api.neteller.com/v1/orders/ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e",
                       "rel": "self",
                       "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/checkout/ja3l3i_289lGk_3k2390",
                        "rel": "hosted_payment",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/orders/ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e/invoice",
                        "rel": "invoice",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/payments/154391457301406",
                        "rel": "payment",
                        "method": "GET"
                    }
                ]
            }
```

## Lookup invoice for an order [GET /orders/{orderId}/invoice]

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|order|
|**Related Resources (if applicable)**|customer|

+ Parameters

    + orderId: `ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e` (required) - ID of the order.

+ Request (application/json)


    + Parameters
    
        + orderId: ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN

            
+ Response 200 (application/json)

    + Body
```
            {
                "invoiceId": "INV_259e0052-a345-48e9-835c-4f6a8dcaeeb9"
                "invoiceNumber": "2915",
                "invoiceDate": "2014-06-01T00:00:00Z",
                "invoiceType": "order",
                "billingDetails": [
                    {
                        "email": "jsmith@email.com",
                        "firstName": "John",
                        "lastName": "Smith",
                        "address1": "addressline1",
                        "address2": "addressline2",
                        "address3": "addressline3",
                        "city": "Calgary",
                        "countrySubdivisionCode": "",
                        "country": "US",
                        "postCode": "T8A22J",
                        "lang": "en"
                    }
                ],
                "order": {
                    "link": {
                        "url": "https://api.neteller.com/v1/orders/ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e",
                        "rel": "order",
                        "method": "GET"
                    }
                },
                "status": "paid",
                "totalAmount": 2495,
                "currency": "USD",
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/orders/ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e/invoice",
                        "rel": "self",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                        "rel": "customer",
                        "method": "GET"
                    }
                ]
            }
```

# Customers [/customers]
                                                                                                                                                                                                                                                                                                                      
## Create a New Customer [POST]

This API call will return you a link that you can redirect your customers to so they 
can quickly complete their NETELLER account signup.  The signup pages will be pre-populated 
with profile information you have already collected.

If you supplied a valid linkBackUrl, the member will have the option of returning back to your site immediately upon completion of the account signup flow.

Sample account confirmation screen
![](https://github.com/paysafegroup/neteller_rest_api_v1/raw/master/images/Create-a-customer-linkBack.png)

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|member\_signup\_redirect|


+ Request (application/json)


    + Attributes
        + `accountProfile` (object, required) - The customer profile information to be used to pre-fill the signup pages with.
        + `linkBackUrl` (object, optional) - A valid http:// or https:// url that should be presented to the member upon completion of their signup/deposit that will direct them back to your site. Note: At minimum, the payee's email address or NETELLER Account ID must be supplied.At minimum, the payee's email address or NETELLER Account ID must be supplied.
        + `btag`: `A_234B_345C_` (string, optional) - This value should be provided if you are registered in the NETELLER affiliate program. The btag can be found as a parameter in the banner URL string. 

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN
            
    + Body            
```
            {
                "accountProfile": {
                    "firstName": "John",
                    "lastName": "Smith",
                    "email": "jsmith@email.com",
                    "address1": "addressline1",
                    "address2": "addressline2",
                    "address3": "addressline3",
                    "city": "Calgary",
                    "country": "CA",
                    "countrySubdivisionCode": "AB",
                    "postCode": "T8A22J",
                    "contactDetails": [
                        {
                            "type": "landLine",
                            "value": "14032332333"
                        },
                        {
                            "type": "mobile",
                            "value": "14035552333"
                        }
                    ],
                    "gender": "m",
                    "dateOfBirth": {
                        "year": "1975",
                        "month": "01",
                        "day": "31"
                    },
                    "accountPreferences": {
                        "lang": "en",
                        "currency": "EUR"
                    }       
                },
                "linkBackUrl": "https://[YOUR_SITE]/cashier?TOKEN=234AJ242K22KMJKP",
                "btag": "A_234B_345C_"
            }
```

+ Response 201 (application/json)

    + Body
```
            {
                "links": [
                    {
                        "url": "https://member.neteller.com/member?emailAddress=jsmith@email.com&token=f45bc7114859cda1f46d8a2bbbc3449f5f42f",
                        "rel": "member_signup_redirect",
                        "method": "GET"
                    }
                ]
            }   
```


            
## Lookup Customer [GET /customers/{customerId}?email={email},accountId={accountId}]

Return details about a particular customer.

> Note: A customer object will only be returned if the customer has completed their account setup.  The level of detail returned is dependant upon what scope authorization you have received from the member, see 
> the authorization grant flow for more information.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|account\_basic\_profile, account\_enhanced\_profile, account\_contacts, account\_available\_balance|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `customerId`: `CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325` (optional) - ID of the customer.
    + `email` (optional) - The email of the member.
    + `accountId` (optional) - The 12 digit NETELLER Account Id.

+ Request Without account\_basic\_profile authorization (application/json)

    + Parameters
        + `customerId`: CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN

            
+ Response 200 (application/json)

    + Body            
```
            {
               "customerId": "CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
               "accountProfile": {
                    "email": "jsmith@email.com",
                    "accountId": "451234567890"
                },
                "verificationLevel": "01"
            }
```

+ Request  With account\_basic\_profile authorization (application/json)


    + Parameters
        + `email`: `jsmith@email.com`
        
    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN

            
+ Response 200 (application/json)

    + Attributes
    
        + `customerId`: `CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325` (string, required) - Unique identifier for this customer. ie. CUS\_0d676b4b-0eb8-4d78-af25-e41ab431e325
        + `accountProfile` (accountProfile) - The member account profile.
        + `verificationLevel`: `01` (string, required) - 00 - Member has not been verified, no registered payment instruments; 01 - Member has not been verified, has one or more registered payment instruments; 10 - Member is verified, no registered payment instruments; 11 - Member is verified, has one or more registered payment instruments
        + `availableBalance` (balance) - Member's currently available account balance.
        

## Verify Customer details [GET /customers/verify?email={email}&firstName={firstName}&lastName={lastName}&dateOfBirth={dateOfBirth}&houseNumber={houseNumber}&country={country}&postCode={postCode}]

The verify endpoint can be used to verify that member account details in the NETELLER system match with details you have for 
the member in your system. Call this endpoint with the specific account identifier and one or more of the values you would
like to confirm and NETELLER will return a MATCH or NO_MATCH result for each. 

|VerificationLevel   |Description|
|---                 |---|
|00                  |Member has not been verified, no registered payment instruments|
|01                  |Member has not been verified, has one or more registered payment instruments  \(CC or Bank Acct Verified\)|
|10                  |Member is verified, no registered payment instruments|
|11                  |Member is verified, has one or more registered payment instruments \(CC, Bank Acct Verified\)|

When you make your request, the input values will be normalized to remove special characters so there will be an 
increased likelyhood of finding a match.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `email` (required) - The customers email.
    
        <br/><br/>Alternatively you can query by either the NETELLER accountId or customerId.

        + Members
            + `?email=john.doe@email.com` 
            + `?accountId=450000000000`
            + `?customerId=CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325`

    + `firstName` (optional) - The customers first name.
    + `lastName` (optional) - The customers last name.
    + `dateOfBirth` (optional) - The customers date of birth. Format: YYYYMMDD
    + `houseNumber` (optional) - The customer house or building number.
    + `country` (optional) - The customers ISO 3166-1 Alpha 2-code country of residence.
    + `postCode` (optional) - The customers postal code or zip code. 


+ Request Account found (application/json)

    + Parameters
    
        + `email`: john.doe@email.com
        + `firstName`: Johnathan
        + `lastName`: Doe
        + `dateOfBirth`: 19720223
        + `houseNumber`: 434
        + `country`: DE
        + `postCode`: 23232

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN

            
+ Response 200 (application/json)

    + Body
```
            {
                "email": "MATCH",
                "firstName": "NO_MATCH",
                "lastName": "MATCH",
                "dateOfBirth": "MATCH"
                "houseNumber": "MATCH",
                "postCode": "MATCH",
                "country": "MATCH",  
                "verificationLevel": "01"
            }
```

+ Request No account found (application/json)

    + Parameters
    
        + `email`: foobar@email.com

    + Headers
        
            Authorization: Bearer {access_token}

            
+ Response 404 (application/json)


    + Headers
    
            X-Application-Status-Code: 5269

    + Body
```
            {
                "error": {
                    "code": "5269",
                    "message": "Entity Not Found"
                }
            }
```
      

## Lookup subscription for a customer [GET /customers/{customerId}/subscriptions?limit={limit}&offset={offset}]

Return a list of all subscription for the customer.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `customerId`: `CUS_0d676b4b-0ab3-4d78-af25-e452ab431e522` (required) - The unique identifier for the customer.
    + `limit` (optional) - The number of records to be returned. Default = 10; Max = 100.
    + `offset` (optional) - Allows you to fetch the next set of resources.

+ Response 200 (application/json)

    + Body
```
            {
                "list": [
                    {
                        "subscriptionId": "SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                        "plan": {
                            "link": {
                                "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                                "rel": "plan",
                                "method": "GET"
                            }
                        },
                        "customer": {
                            "link": {
                                "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                                "rel": "customer",
                                "method": "GET"
                            }
                        },
                        "status": "active",
                        "startDate": "2014-06-01T00:00:00Z",
                        "endDate": "2014-12-31T00:00:00Z",
                        "currentPeriodStart": "2014-07-01T00:00:00Z",
                        "currentPeriodEnd": "2014-07-31T00:00:00Z",
                        "cancelAtPeriodEnd": false,
                        "cancelDate": null,
                        "lastCompletedPaymentDate": "2014-06-31T00:00:00Z"
                    },
                    {},
                    {}
                ],
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0ab3-4d78-af25-e452ab431e522/subscriptions?session=1212&limit=10&offset=10",
                        "rel": "self",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0ab3-4d78-af25-e452ab431e522/subscriptions?session=1212&limit=10&&offset=0",
                        "rel": "prev_offset",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0ab3-4d78-af25-e452ab431e522/subscriptions?session=1212&limit=10&offset=20",
                        "rel": "next_offset",
                        "method": "GET"
                    }
                ]
            }
```

# Plans [/plans]

Subscription plans allow you to establish a fixed recurring payment schedule with your customers.  Subscription Plans allow you define the pricing information and billing cycle for a subscription. You must first establish a subscription plan before you can offer it to your customers.

You can then enroll your customers by creating a new 'Subscription' request and NETELLER will automatically transfer recurring payments to your merchant account every period on their behalf.

## Create a plan [POST /plans]

Creating a subscription plan allows you to define a plan for having automatic payments transferred to your merchant account on a fixed schedule.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Attributes

    + `planId`: `MONTHLYGREENPLAN` (required) - The unique identifier for the subscription plan.
    + `planName` (string, required) - The display name for the plan.
    + `interval` (number, required) - The number of intervals between each billing attempt.
    + `intervalType` (string, required) - The frequency that the plan member will be billed \(daily, weekly, monthly, yearly\).
    + `intervalCount` (number, required) - The length of the contract in intervals. \(ie: to establish a 1 year subscription plan with quarterly charges, then interval = 3, intervalType = 'monthly' and intervalCount = 4.        + amount: `1499` (number, required) - The amount to bill for each re-occurrence.  Amount should be in the smallest unit of currency with no decimals. \(ie: 14.99 EUR would be 1499\).
    + `currency` (string, required) - The currency of the amount to be billed
        
+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN
            
    + Body
```
            {
                "planId": "MONTHLYGREENPLAN",
                "planName": "Sample Premier Monthly Membership",
                "interval": 3,
                "intervalType": "monthly",
                "intervalCount": 4,
                "amount": 2995,
                "currency": "EUR"
            } 
```

+ Response 201 (application/json)


    + Body
```
            {
                "planId": "MONTHLYGREENPLAN",
                "planName": "Sample Premier Monthly Membership",
                "interval": 3,
                "intervalType": "monthly",
                "intervalCount": 4,
                "amount": 2995,
                "currency": "EUR",
                "status": "active",
                "numberOfSubscriptions": 0,
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## Lookup a plan [GET /plans/{planId}]

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `planId`: `MONTHLYGREENPLAN` (required) - The unique identifier for the subscription plan.


+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)

    + Attributes
    
        + `customerId`: `CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325` (string) - Unique identifier for this customer.
        + `accountProfile` (object) - The member account profile.
        + `verificationLevel` (string) - 00 - Member has not been verified, no registered payment instruments; 01 - Member has not been verified, has one or more registered payment instruments; 10 - Member is verified, no registered payment instruments; 11 - Member is verified, has one or more registered payment instruments
        + `availableBalance` (object) - Member's currently available account balance.

    + Body
```        
            {
                "planId": "MONTHLYGREENPLAN",
                "planName": "Sample Premier Monthly Membership",
                "interval": 3,
                "intervalType": "monthly",
                "intervalCount": 4,
                "amount": 2995,
                "currency": "EUR",
                "status": "active",
                "numberOfSubscriptions": 2,
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## Cancel a plan [POST /plans/{planId}/cancel]

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Attributes

    + `planId`: `MONTHLYGREENPLAN` (required) - The unique identifier for the subscription plan.


+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 201 (application/json)


    + Body
```        
            {
                "planId": "SAMPLEMONTHLY",
                "planName": "Sample Premier Monthly Plan",
                "interval": 3,
                "intervalType": "monthly",
                "intervalCount": 4,
                "amount": 2495,
                "currency": "EUR",
                "status": "cancelled",
                "numberOfSubscriptions": 2,
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/plans/SAMPLEMONTHLY",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## Delete a plan [DELETE /plans/{planId}]

You can only delete a subscription plan that has not been offered to any members.  Once you have enrolled members in a subscription plan, you may choose to cancel the plan to prevent any further subscriptions from being created.  
Any existing subscriptions on a cancelled plan will continue to be charged until the end of their term

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Attributes

    + `planId`: `MONTHLYGREENPLAN` (required) - The unique identifier for the subscription plan.


+ Request Attempt to delete a non-subscribed plan (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)

+ Request Attempt to delete a subscribed plan (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)

    + body
```
            {
              "error": {
                "code": "20101",
                "message": "Cannot delete a subscribed to plan"
              }
            }
```

## List all your plans [GET /plans?limit={limit}&offset={offset}]

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `limit` (optional) - The number of records to be returned. Default = 10; Max = 100.
    + `offset` (optional) - Allows you to fetch the next set of resources.
            
+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)
    
    + Body
 ```   
                {
                    "meta": {
                        "numberOfRecords": 5,
                        "limit": 10,
                        "page": 1
                    },                
                    "list": [
                        {
                            "planId": "MONTHLYGREENPLAN",
                            "planName": "Sample Premier Monthly Membership",
                            "interval": 3,
                            "intervalType": "monthly",
                            "intervalCount": 4,
                            "amount": 2995,
                            "currency": "EUR",
                            "status": "active",
                            "numberOfSubscriptions": 2
                        },
                        {
                            ...
                        },
                        {
                            ...
                        },
                        
                    ],
                    "links": [
                        {
                            "url": "https://api.neteller.com/v1/plans?sessionid=234243242&limit=10&offset=0",
                            "rel": "self",
                            "method": "GET"
                        },
                        {
                            "url": "https://api.neteller.com/v1/plans?sessionid=234243242&limit=10&offset=10",
                            "rel": "next_offset",
                            "method": "GET"
                        }
                    ]
                }
```

# Subscriptions [/subscriptions]

Members must be subscribed to a subscription plan in order for NETELLER to issue recurring charges on your behalf.  The "subscription" object represents a single enrollment of a member in a subscription plan.  

## Create a subscription [POST /subscriptions]

Creating a subscription is the act of enrolling an existing NETELLER account holder in one of your subscription plans.  Once a subscription has been created, payments will be automatically distributed to your merchant account on every recurring billing cycle.  In the event that a payment cannot be made (ie: the NETELLER account holder has insufficient funds available), we will retry to collect payment up to 3 times over a 7 day period.  If the payment is still unsuccessful and all retry attempts have been exhausted, a final notification of the failed charge will sent via email to both you and the subscriber.   You can optionally configure to be notified via webhook from your merchant account portal.

In order to create a subscription you must first obtain member authorization for the required 'subscription_payment' scope. See Obtain an access token using the auth_code grant type.  Once authorized, you can then exchange the authorization code for an access token that will allow you to access this API. 

|Item|Value|
|---|---|
|**Scope required to initiate request**|subscription_payment|
|**Scope(s) impacting response**|account\_basic\_profile, account\_enhanced\_profile, account\_contacts, account\_available\_balance|
|**Expandable Resources**|plan, customer|
|**Related Resources (if applicable)**|payment|

+ Request (application/json)

    + Attributes
        + `planId`: `MONTHLYGREENPLAN` (string, required) - The unique identifier for the subscription plan.
        + `customerId`: `CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325` (string, required) - Unique identifier for this customer. The customer id will be returned with auth_code in the authorization flow. Authorization is required in order to create a subscription on behalf of a customer.
        + `startDate`: `YYYY-MM-DDThh:mm:ssZ ISO 8601 format (UTC)` (string, optional) - An optional start date for the subscription.  If the subscription is to start immediately, this should be left blank and enrollment will immediately attempt to charge the initial payment.  If the initial payment fails for any reason, then an error will be returned and the subscription will not be started.


    + Headers
    
            Authorization: Bearer YOUR-ACCESS-TOKEN
            
    + Body
```
            {
                "planId": "MYGOLDPLAN",
                "customerId": "CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                "startDate": "2014-06-01T00:00:00Z"
            }
```

+ Response 201 (application/json)

    + Body
```
            {
                "subscriptionId": "SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                "plan": {
                    "link": {
                        "url": "https://api.neteller.com/v1/plans/DEMOGOLDPLAN",
                        "rel": "plan",
                        "method": "GET"
                    }
                },
                "customer": {
                    "link": {
                        "url": "https://api.neteller.com/v1/customers/CUS_FCBB852E-CAF6-4109-8AE1-40100D3ECE12",
                        "rel": "customer",
                        "method": "GET"
                    }
                },
                "status": "active",
                "startDate": "2014-11-20T23:52:37Z",
                "endDate": "2015-11-19T23:52:37Z",
                "currentPeriodStart": "2014-11-20T23:52:35Z",
                "currentPeriodEnd": "2014-11-27T23:52:35Z",
                "cancelAtPeriodEnd": "false",
                "cancelDate": null,
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                        "rel": "self",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/payments/138416527555633",
                        "rel": "payment",
                        "method": "GET"
                    }
                ]
            }
```

## Lookup subscription [GET /subscriptions/{subscriptionId}?expand={expand}]

Retrieve information about a previously created subscription by passing the relevant subscription identifier.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|account\_basic\_profile, account\_enhanced\_profile, account\_contacts, account\_available\_balance|
|**Expandable Resources**|plan, customer|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `subscriptionId`: `SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522` (string, required) - A system generated value that uniquely identifies this subscription.
    + `expand` (string, optional) - Name of the resource to expand inline in the response.

        <br/><br/>You can choose to include the expanded detail for the following resources.

        + Members
            + `plan` 
            + `customer`
            
+ Request (application/json)


    + Parameters
    
        + `subscriptionId`: SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522
        

    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)
    
    + Body
 ```   
            {
                "subscriptionId": "SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                "plan": {
                    "link": {          
                            "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                            "rel": "plan",
                            "method": "GET"
                    }
                },
                "customer": {
                    "link": {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                        "rel": "customer",
                        "method": "GET"
                    }
                },
                "status": "active",
                "startDate": "2014-06-01T00:00:00Z",
                "endDate": "2014-12-31T00:00:00Z",
                "currentPeriodStart": "2014-07-01T00:00:00Z",
                "currentPeriodEnd": "2014-07-31T00:00:00Z",
                "cancelAtPeriodEnd": false,
                "cancelDate": null,
                "lastCompletedPaymentDate": "2014-06-31T00:00:00Z",
                "links": [
                    {
                        "url": "https: //api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }    
```

+ Request (application/json)


    + Parameters
        + `subscriptionId`: SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522
        + `expand`: plan
        
    + Headers
    
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)

    + Body
```
            {
                "subscriptionId": "SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                "plan": {
                    "planId": "MONTHLYGREENPLAN",
                    "planName": "Sample Premier Monthly Plan",
                    "interval": 3,
                    "intervalType": "monthly",
                    "intervalCount": 4,
                    "amount": 2495,
                    "currency": "EUR",
                    "status": "active",
                    "numberOfSubscriptions": 2
                },
                "customer": {
                    "link": {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                        "rel": "customer",
                        "method": "GET"
                    }
                },
                "status": "active",
                "startDate": "2014-06-01T00:00:00Z",
                "endDate": "2014-12-31T00:00:00Z",
                "currentPeriodStart": "2014-07-01T00:00:00Z",
                "currentPeriodEnd": "2014-07-31T00:00:00Z",
                "cancelAtPeriodEnd": false,
                "cancelDate": null,
                "lastCompletedPaymentDate": "2014-06-31T00:00:00Z",
                "links": [
                    {
                        "url": "https: //api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }    
```

## Cancel subscription [POST /subscriptions/{subscriptionId}/cancel]

By default when you cancel a subscription, the NETELLER subscription status is updated immediately to reflect a cancelled state.  If you wish to delay cancellation until the end of the current period, pass in the optional cancelAtPeriod end flag and the subscription will be cancelled just before the start of the next billing cycle.

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|plan,customer|
|**Related Resources (if applicable)**|none|

+ Request (application/json)


    + Attributes
        + `subscriptionId`: `SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522` (string, required) - A system generated value that uniquely identifies this subscription.
        + `cancelAtPeriodEnd`: `true` (boolean, optional) - An optional parameter that you can set to true if you want to delay the cancellation of the subscription until the end of the current period.  By default, if this is not passed the subscription will be cancelled immediately. As soon as you cancel a subscription, the member will no longer be billed.
        
    + Headers

            Authorization: Bearer YOUR_ACCESS_TOKEN

            
+ Response 200 (application/json)


    + Body
```        
            {
                "subscriptionId": "SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                "plan": {
                    "link": {
                        "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                        "rel": "plan",
                        "method": "GET"
                    }
                },
                "customer": {
                    "link": {
                        "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                        "rel": "customer",
                        "method": "GET"
                    }
                },
                "status": "active",
                "startDate": "2014-06-01T00:00:00Z",
                "endDate": "2014-12-31T00:00:00Z",
                "currentPeriodStart": "2014-07-01T00:00:00Z",
                "currentPeriodEnd": "2014-07-31T00:00:00Z",
                "cancelAtPeriodEnd": true,
                "cancelDate": "2014-06-04T12:24:02Z",
                "lastCompletedPaymentDate": "2016-01-08T00:00:03Z",
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                        "rel": "self",
                        "method": "GET"
                    }
                ]
            }
```

## List subscriptions [GET /subscriptions?limit={limit}&offset={offset}]

You can obtain a list of all your active subscriptions.  Newest subscriptions will be returned at the top of the list (sorted newest -> oldest).

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `limit` (optional) - The number of records to be returned. Default = 10; Max = 100.
    + `offset` (optional) - Allows you to fetch the next set of resources.
    
+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)
    
    + Body
```    
            {
                "meta": {
                    "numberOfRecords": 14,
                    "limit": 10,
                    "page": 2
                },            
                "list": [
                    {
                        "subscriptionId": "SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                        "plan": {
                            "link": {
                                "url": "https://api.neteller.com/v1/plans/MONTHLYGREENPLAN",
                                "rel": "plan",
                                "method": "GET"
                            }
                        },
                        "customer": {
                            "link": {
                                "url": "https://api.neteller.com/v1/customers/CUST_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                                "rel": "customer",
                                "method": "GET"
                            }
                        },
                        "status": "active",
                        "startDate": "2014-06-01T00: 00: 00Z",
                        "endDate": "2014-12-31T00: 00: 00Z",
                        "currentPeriodStart": "2014-07-01T00: 00: 00Z",
                        "currentPeriodEnd": "2014-07-31T00: 00: 00Z",
                        "cancelAtPeriodEnd": false,
                        "cancelDate": null,
                        "lastCompletedPaymentDate": null
                    },
                    {},
                    {}
                ],
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/subscriptions?session=1212&limit=10&offset=10",
                        "rel": "self",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/subscriptions?session=1212&limit=10&offset=0",
                        "rel": "prev_offset",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/subscriptions?session=1212&limit=10&offset=20",
                        "rel": "next_offset",
                        "method": "GET"
                    }
                ]
            }
```

## Lookup invoice for a subscription [GET /subscriptions/{subscriptionId}/invoices/{invoiceNumber}]

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|subscription|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `subscriptionId`: `SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522` (string, required) - A system generated value that uniquely identifies this subscription.
    + `invoiceNumber`: `3020` (number, required) - The specific invoice number.
    
+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)
    
    + Body
```   
            {
               "invoiceId": "INV_259e0052-a345-48e9-835c-4f6a8dcaeeb9",
               "invoiceNumber": 3020,
               "invoiceDate": "2014-06-01T00:00:00Z",
               "invoiceType": "subscription",
               "billingDetails": [
                   {
                       "email": "jsmith@email.com",
                       "firstName": "John",
                       "lastName": "Smith",
                       "address1": "addressline1",
                       "address2": "addressline2",
                       "address3": "addressline3",
                       "city": "Calgary",
                       "countrySubdivisionCode": "AB",
                       "country": "CA",
                       "postCode": "T8A22J",
                       "lang": "en"
                   }
               ],
               "subscription": {
                   "link": {
                       "url": "https://api.neteller.com/v1/subscription/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                       "rel": "subscription",
                       "method": "GET"
                   }
               },
               "status": "paid",
               "periodStartDate": "2014-06-01T00:00:00Z",
               "periodEndDate": "2014-06-31T00:00:00Z",
               "totalAmount": 2495,
               "currency": "USD",
               "retryCount": 1,
               "nextRetryDate": null,
               "links": [     
                   {
                      "url": "https://api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522/invoices/3020",
                      "rel": "self",
                      "method": "GET"
                  },
                   { 
                       "url": "https://api.neteller.com/v1/payments/208420583595657", 
                       "rel": "payment", 
                       "method": "GET" 
                   },
                   {
                       "url": "https://api.neteller.com/v1/customers/CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325",
                       "rel": "customer",
                       "method": "GET"
                   }
               ]
            }
```

## List all invoices for a subscription [GET /subscriptions/{subscriptionId}/invoices?limit={limit}&offset={offset}]

|Item|Value|
|---|---|
|**Scope required to initiate request**|none|
|**Scope(s) impacting response**|none|
|**Expandable Resources**|none|
|**Related Resources (if applicable)**|none|

+ Parameters

    + `subscriptionId`: `SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522` (string, required) - A system generated value that uniquely identifies this subscription.
    + `limit` (optional) - The number of records to be returned. Default = 10; Max = 100.
    + `offset` (optional) - Allows you to fetch the next set of resources.
    
+ Request (application/json)


    + Headers
        
            Authorization: Bearer YOUR-ACCESS-TOKEN


+ Response 200 (application/json)
    
    + Body
```    
            {
                "meta": {
                    "numberOfRecords": 16,
                    "limit": 10,
                    "page": 2
                }, 
                "list": [
                    {
                        "invoiceId": "INV_259e0052-a345-48e9-835c-4f6a8dcaeeb9",
                        "invoiceNumber": 2915,
                        "invoiceDate": "2014-06-01T00:00:00Z",
                        "invoiceType": "subscription",
                        "billingDetails": [
                            {
                                "email": "jsmith@email.com",
                                "firstName": "John",
                                "lastName": "Smith",
                                "address1": "addressline1",
                                "address2": "addressline2",
                                "address3": "addressline3",
                                "city": "Calgary",
                                "countrySubdivisionCode": "AB",
                                "country": "CA",
                                "postCode": "T8A22J",
                                "lang": "en"
                            }
                        ],
                        "subscription": {
                            "link": {
                                "url": "https://api.neteller.com/v1/subscription/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522",
                                "rel": "subscription",
                                "method": "GET"
                            }
                        },
                        "status": "paid",
                        "periodStartDate": "2014-06-01T00:00:00Z",
                        "periodEndDate": "2014-06-31T00:00:00Z",
                        "totalAmount": 2495,
                        "currency": "USD",
                        "retryCount": 1,
                        "nextRetryDate": null
                    },
                    {},
                    {}
                ],
                "links": [
                    {
                        "url": "https://api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522/invoices?session=1212&limit=10&offset=10",
                        "rel": "self",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522/invoices?session=1212&limit=10&&offset=0",
                        "rel": "prev_offset",
                        "method": "GET"
                    },
                    {
                        "url": "https://api.neteller.com/v1/subscriptions/SUB_0d676b4b-0ab3-4d78-af25-e452ab431e522/invoices?session=1212&limit=10&offset=20",
                        "rel": "next_offset",
                        "method": "GET"
                    }
                ]
            }
```

# Data Structures

## `accessToken`

+ `tokenType`: `Bearer` (string) - The type of access token that was issued.  Currently only 'Bearer' tokens are supported.

    _Read Only_
    
+ `expiresIn`: `1000` (number) - How much time in seconds until the token expires.

    _Read Only_
    
+ `accessToken`: `0.AQAAAVF-mqsiAAAAAAAbd0A71bIG8IUwcgHV7mAYiG7J.EAAQsWDnpqRj7WwyFVLTsdo0yXWh9L4` (string) - The access token to pass in the API call to access the protected resource.

    _Read Only_

## `accountPreferences`

+ `lang`: `en` (string) - The preferred language of the member. See [Languages](http://paysafegroup.github.io/neteller_rest_api_v1/#/introduction/technical-introduction/languages) for complete list.
+ `currency`: `EUR` (string) - The preferred wallet currency of the member. See [Currencies](#currencies) for complete list.

## `accountProfileBase`

+ `email`: `jsmith@email.com` (string) - The account email address.

## `accountProfile` (accountProfileBase)

+ `firstName`: `John` (string) - The clients first name, or given name.
+ `lastName`: `Smith` (string) - The clients last name, or family name.
+ `address1`: `address line 1` (string) - The clients residential, or street address.
+ `address2`: `address line 2` (string) - Continuation of the clients residential, or street address.
+ `address3`: `address line 3` (string) - Continuation of the clients residential, or street address.
+ `city`: `Smallville` (string) - The clients city of residence.
+ `countrySubdivisionCode`: `AB` - The ISO 3166-2 code indicating the state/province/district or other value denoting the clients country subdivision (e.g. BE=Berlin. 13=Tôkyô [Tokyo], AB=Alberta)
+ `country`: `CA` (string) - The ISO 3166-1 Alpha 2-code for the clients country of residence (e.g. Germany = DE, JP=Japan. CA=Canada).
+ `postCode`: `T3H3B2` (string) - The zip code, or postal code, of the clients residence.
+ `contactDetail` ([contactDetail]) - An array of contact numbers. Can accept up to 2 phone numbers, the first number will be considered primary. Phone numbers should contain no special characters.
+ `gender`: `m` (string) - m \- male, f \- female
+ `dateOfBirth` (date) - Registered birthdate for the account holder.
+ `accountPreferences` (accountPreferences)

## `accountProfileResponse` (accountProfileBase)

+ accountId: `451000000000` (string) - The 12 digit NETELLER account number.
+ Include accountProfile

## `balance`

+ `amount`: `450` (number) - The amount in the smallest unit of currency.
+ `currency`: `CAD` (string) - The associated currency.

## `billingDetail`

+ `email`: `jsmith@email.com` (string) - The account email address.
+ `firstName`: `John` (string) - The clients first name, or given name.
+ `lastName`: `Smith` (string) - The clients last name, or family name.
+ `address1`: `address1` (string) - The clients residential, or street address.
+ `address2`: `address2` (string) - Continuation of the clients residential, or street address.
+ `address3`: `address3` (string) - Continuation of the clients residential, or street address.
+ `city`: `city` (string) - The clients city of residence.
+ `countrySubdivisionCode`: `AB` string -The ISO 3166-2 code indicating the state/province/district or other value denoting the clients country subdivision (e.g. BE=Berlin. 13=Tôkyô [Tokyo], AB=Alberta)
+ `country`: `CA` (string) - The ISO 3166-1 Alpha 2-code for the clients country of residence (e.g. Germany = DE, JP=Japan. CA=Canada)
+ `postCode`: `T3H3L2` (string) - The zip code, or postal code, of the clients residence.
+ `lang`: `EN` (string) - The preferred language of communication. See Languages for complete list.

## `billingDetails`

+ `billingDetails` (object, optional) - Provide the billing details for your customer and the checkout pages will be pre-filled for them.  Currently only 1 recipient is supported.
    + `email`: `jsmith@email.com` (string) - The account email address.
    + `firstName`: `John` (string) - The clients first name, or given name.
    + `lastName`: `Smith` (string) - The clients last name, or family name.
    + `address1`: `address1` (string) - The clients residential, or street address.
    + `address2`: `address2` (string) - Continuation of the clients residential, or street address.
    + `address3`: `address3` (string) - Continuation of the clients residential, or street address.
    + `city`: `city` (string) - The clients city of residence.
    + `countrySubdivisionCode`: `AB` string -The ISO 3166-2 code indicating the state/province/district or other value denoting the clients country subdivision (e.g. BE=Berlin. 13=Tôkyô [Tokyo], AB=Alberta)
    + `country`: `CA` (string) - The ISO 3166-1 Alpha 2-code for the clients country of residence (e.g. Germany = DE, JP=Japan. CA=Canada)
    + `postCode`: `T3H3L2` (string) - The zip code, or postal code, of the clients residence.
    + `lang`: `EN` (string) - The preferred language of communication. See Languages for complete list.

## `contactDetail`

+ `type`: `landLine` (string) - landLine, mobile
+ `value`: `14032339400` (string) - The full phone number including country dialing code.

## `customer`

+ `customerId`: `CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325` (string) - Unique identifier for this customer.ie. CUS_0d676b4b-0eb8-4d78-af25-e41ab431e325
+ `accountProfile` (accountProfile) - The associated account profile.
+ `verificationLevel`: `01` (string)

    00 - Member has not been verified, no verified payment instruments<br/>
    01 - Member has not been verified, has one or more verified payment instruments<br/>
    10 - Member is verified, no verified payment instruments<br/>
    11 - Member is verified, has one or more verified payment instruments<br/>

+ `availableBalance` (balance) - The members currently available balance.

## `date`

+ `year`: `1973` (string) - YYYY
+ `month`: `03` (string) - MM
+ `day`: `21` (string) - DD

## `error`

+ `code` (string) - The error code reflecting the reason for the failed request.
+ `message` (string) - Short description of the status.
+ `fieldErrors` ([fielderror]) - If applicable, details around particular fields that reported errors with the API request.

## `fees`

+ `fees` ([object]) - Specific fees (setup/shipping&handling, etc.) that are to be included in the payment.
    + `feeType`: `service_fee` (string) - Description of the fee.
    + `feeAmount`: `71` (number) - Amount of the fee.
    + `feeCurrency`: `EUR` (string) - The associated currency.

## `fieldError`

+ `field` (string) - Identifies the JSON request field.
+ `error` (string) - The problem associated with field.

## invoice

+ `invoice` (object)

## `items`

+ `items` ([object], required) - Specific line items (products/fees or services) that you are requesting payment for.
    + `amount`: `100` (string, required) - Amount for a single item.
    + `quantity: `1` (string, required) - Number of items requested.
    + `sku`: `` (string, optional) - Optional reference for the order item.
    + `name`: `Product XYZ` (string, required) - Short name for the item.
    + `description`: `XYZ is wonderful` (string, required) - Description of the item.

## `link`

+ rel: `self` (string) -  A reference describing what this hateoas link is for.
+ url: `https://api.test.paysafe.com/alternatepayments/v1/accounts/1466458515/payments/e50e19a6-8edd-44ec-abc4-18d0a97d51d8` (string) - The url.
+ method: `GET` (string) - The HTTP method to use.

## `links`

+ links (array[link]) - This is an array of links related to the resource.

    Typically you will have reference to any parent resources, and a reference to the child resource (if applicable).
    You may also see links for any call to action flows.  For example, when creating an order that involves a customer redirect, the response will include a *hosted_payment* rel that you must direct your consumer to.

    _Read Only_

## `order`

+ `order` (object, required) - Details about this order.
    + `orderId` (string) - Unique NETELLER reference for the order. ie: ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e, SUB_c46645ea-b7b0-4a91-87f7-88c00ec0dea1
    
        _Read Only_
    
    + `merchantRefId` (string, required) - The associated merchant reference id from the initial request.
    + `totalAmount` (number, required) - The total amount due for this order, including all items, fees, taxes.
    + `currency` (string, required) - The currency of the total amount due.  The order must have the same currency for all items, fees and taxes. see Currencies for complete list
    + `status` (enum) - The status of the order.
        
        _Read Only_
        
        + Members
            + `pending`
            + `cancelled`
            + `failed` - The order was not paid.
            + `paid`
            + `expired` - The order had expired (default: 15 mins)

    + `lang` (string) - The language that the Quick Checkout pages should be displayed in. see Languages for complete list
    + Include items
    + Include fees
    + Include taxes
    + customerIp (string) - The value should be the incoming IP address of your customer, which will restrict the payment page to being viewable only from this IP address.
    + Include paymentMethods
    + Include redirects

## `payment`

+ `customer` (customer) - NETELLER member account details for this transaction (if applicable).
+ `billingDetail` (billingDetail) - Billing details for this transaction, if paid as a guest and is not associated with a NETELLER account.
+ `transaction` (transaction) - Associated transaction details.

## `paymentMethods`

+ `paymentMethods` ([object]) - This allows you to define which payment options you would like to present in the checkout
    + `type` (enum)
        + Members
            + `neteller`
            + `voucher`
            + `onlinebanking`
    + `value` (string)

## `plan`

+ `planId` (string) - A unique identifier for the plan that you will use to identify which plan you want to enroll your customer in.
+ `planName` (string) - The display name for the plan.
+ `interval` (number) - The number of intervals between each billing attempt. (ie: to bill every 15 days, you would select an interval of 15 and a type of daily).
+ `intervalType` (string) - The type of interval you wish want to define. 

    daily
    weekly
    monthly
    yearly

+ `intervalCount` (number) - The length of the contract in intervals, or how many recurring billings will be attempted. intervalCount * interval = Total Subscription Term (duration) (ie: For a yearly subscription billing every 3 months, this would be 4)
+ `amount` (number) - The amount to bill for each re-ocurrence.
+ `currency` (string) - The currency of the amount to be billed.
+ `status` (string) 

    pending - The subscription has been requested and is pending activation (start date has not yet elapsed).
    active - The subscription plan is currently active
    cancelled - The subscription plan was cancelled and can no longer be subscribed to

+ `numberofSubscriptions` (number) - The number of subscriptions that were enrolled under a plan. This includes cancelled and ended subscriptions.

## `redirects`

+ `redirects` ([object]) - This allows you to add redirects to the order. Redirects cause a connection back to your merchant system via the customer's browser. 
    + `rel` (enum, required) - The final transaction status that determines where to return the consumer to. 
    
        + Default: `on_success`
        
        + Members
            + `on_success`
            + `on_pending`
            + `on_error`
            + `on_decline`
            + `on_cancel`
            + `on_timeout`
    + `url`: `https://mysite.com/return` (string, required) - The TLS secured endpoint to return the consumer to.

## `subscription`

+ `subscriptionId` (string) - A system generated value that uniquely identifies this subscription.
+ `plan` (plan) - The associated subscription plan that the subscription is for.
+ `customer` (customer) - The associated customer for this subscription.
+ `status` (string) 

    pending - A subscription has been requested and is pending activation upon the requested start date
    active - The subscription is currently active
    cancelled - The subscription was cancelled by the subscriber or by the merchant application
    ended - The subscription has lapsed
    failed - The subscription request failed.  This status will only be set if the subscription was created with no startDate supplied and the immediate billing failed.

+ `startDate` (string) - > current date Date the subscription should start.  If startDate is not supplied, the customer will be billed immediately.  If supplying a subscription startDate, the date must be greater then the current date.

    ISO 8601 format (UTC)
    YYYY-MM-DDThh:mm:ssZ

+ `endDate` (string) - If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended

    ISO 8601 format (UTC)
    YYYY-MM-DDThh:mm:ssZ
    
+ `currentPeriodStart` (string) - Start of the current period that the subscription has been invoiced for.

    ISO 8601 format (UTC)
    YYYY-MM-DDThh:mm:ssZ

+ `currentPeriodEnd` (string) - End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created

    ISO 8601 format (UTC)
    YYYY-MM-DDThh:mm:ssZ

+ `cancelAtPeriodEnd` (boolean) - If the subscription has been canceled with the atPeriodEnd flag set to true, then this value on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
+ `canceledDate` (string) - If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancelAtPeriodEnd, canceledDate will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.

    ISO 8601 format (UTC)
    YYYY-MM-DDThh:mm:ssZ

+ `lastCompletedPaymentDate` (string) - The date the last successful payment was processed for this subscription

    ISO 8601 format (UTC)
    YYYY-MM-DDThh:mm:ssZ

## `taxes`

+ `taxes` ([object]) - Specific taxes(VAT, GST, PST, etc...) that are to be included in the payment.
    + `taxName` (string, required) - The name that will display in history and invoice details for this tax item.  (ie: VAT, GST, PST...etc)
    + `taxAmount` (number, required) - The amount of the tax. Amount fields reflect the smallest unit of currency with no decimals. Eg. $25.00 USD should be formatted as 2500.
    + `taxCurrency` (string, required) - The currency the tax is in. See Currencies for complete list.


## `refreshToken`

+ `tokenType`: `Bearer` (string) - The type of access token that was issued.  Currently only 'Bearer' tokens are supported.

    _Read Only_
    
+ `expiresIn`: `1000` (number) - How much time in seconds until the token expires.

    _Read Only_
    
+ `accessToken`: `0.AQAAAVF-mqsiAAAAAAAbd0A71bIG8IUwcgHV7mAYiG7J.EAAQsWDnpqRj7WwyFVLTsdo0yXWh9L4` (string) - The access token to pass in the API call to access the protected resource.

    _Read Only_
    
+ `refreshToken`: `0.AgAAAUgUGIkyAAAAB1jwsODI5PCkVNOZul5AJ01mYtdh.ezGCYhN5YD22-BCOPX6U-muc72o` (string) - The token to use to obtain a new access token with the same permissions (scope) previously authorized.

    _Read Only_
    
+ `scope`: `subscription_payment` (string)

    _Read Only_
    

## `paymentMethod`

- type: `neteller` (string) - Identifies the type of payment method.
- value: `jsmith@neteller.com` (string) - Further Identifies the payment type, and the source of funds for a payment.

## `transactionBase`

- `merchantRefId`: `23242343` (string) - The external merchant transaction id that uniquely identifies this transaction within the merchant system.
- `amount`: `499` (number) - The amount of the transaction. Amount fields reflect the smallest unit of currency with no decimals. Eg. $25.00 USD should be formatted as 2500 whereas 2500 JPY should be formatted as 2500.
- `currency`: `EUR` (string) - The currency of the transaction.

## `transaction` (transactionBase)

- `id`: `34583838938370293` (number) - The transaction id that identifies this transaction within the NETELLER system.  The returned id is considered a transaction group id and can be used to identify both sides of a transfer.
- `transactionType` (string) - Indicates the type of transaction or specific product for the transaction.
- `createDate`: `2014-02-03T19:12:59Z` (string) - ISO 8601 format (UTC). The timestamp when the transaction was requested. YYYY-MM-DDThh:mm:ssZ
- `updateDate`: `2014-02-03T19:12:59Z` (string) - ISO 8601 format (UTC). The timestamp when the transaction was last updated. YYYY-MM-DDThh:mm:ssZ
- `fees` (fees) - List of fees associated with this transaction.
- `status`: `accepted` (string) - accepted, pending, declined, cancelled, failed

## `transactionError` (transaction)

- `status`: `declined` (string) - accepted, pending, declined, cancelled, failed
- `errorCode`: `5269` (string) - If applicable, the corresponding code for why this transaction was not accepted.
- `errorMessage`: `errormessage` (string) - If applicable, the corresponding reason for why this transaction was not accepted